<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Initialize Game" id="13" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. The recognized answer is sent to the answer output.&#x0A;&#x0A;Note that you must open this box to enter the question text and the&#x0A;available answers." x="157" y="21">
              <bitmap>media/images/box/interaction/choice.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Set Marker" id="2" localization="8" tooltip="" x="640" y="275">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import sys
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Create a proxy to ALMemory
        try:
            self.mem = self.session().service( "ALMemory" )
        except Exception, e:
            self.logger.info("Error when creating ALMemory proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if p == "x":
            self.mem.insertData("marker", "X")
        else:
            self.mem.insertData("marker", "O")
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Set Turn" id="8" localization="8" tooltip="" x="934" y="342">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import sys
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Create a proxy to ALMemory
        try:
            self.mem = self.session().service( "ALMemory" )
        except Exception, e:
            self.logger.info("Error when creating ALMemory proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if p == "first":
            self.mem.insertData("turn", "human")
            self.logger.info("human")
        else:
            self.mem.insertData("turn", "robot")
            self.logger.info("robot")
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Clear Board" id="9" localization="8" tooltip="" x="593" y="38">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import sys
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Create a proxy to ALMemory
        try:
            self.mem = self.session().service( "ALMemory" )
        except Exception, e:
            self.logger.info("Error when creating ALMemory proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        initialBoard = [["-", "-", "-"], ["-", "-", "-"], ["-", "-", "-"]]
        self.mem.insertData("board", initialBoard)
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Set Reco. Lang." id="7" localization="8" tooltip="Select the language you would like the robot to recognize. Any following call to&#x0A;ALSpeechRecognition (Speech Reco. box for instance) will use this language.&#x0A;&#x0A;V1.1.0" plugin="setlanguage_plugin" x="334" y="26">
                        <bitmap>media/images/box/interaction/reco_voice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.setTTS = False
        self.setASR = True
        self.setDialog = False
        self.language = "English"

    def getService(self, serviceName, humainName):
        service = None
        try:
            service = self.session().service(serviceName)
        except:
            self.logger.warn("%s is not available, language setting cannot be applied to %s." % (serviceName, humainName))
        return service

    def onLoad(self):
        if self.setTTS:
            self.tts = self.getService("ALTextToSpeech", "speech")
        if self.setASR:
            self.asr = self.getService("ALSpeechRecognition", "recognition")
        if self.setDialog:
            self.dialog = self.getService("ALDialog", "dialog")

    def setLanguage(self, service, serviceName):
        try:
            if service is None:
                return False
            service.setLanguage(self.language)
            return True
        except Exception as e:
            self.logger.error("Could not set language %s for %s: %s" % (self.language, serviceName, e))
            return False

    def onInput_onSet(self):
        res = True
        if self.setTTS:
            res = self.setLanguage(self.tts, "ALTextToSpeech") and res
        if self.setASR:
            res = self.setLanguage(self.asr, "ALSpeechRecognition") and res
        if self.setDialog:
            res = self.setLanguage(self.dialog, "ALDialog") and res

        if res:
            self.onReady()
        else:
            self.logger.error("Language %s could not be set for one or more services." % self.language)
            self.onError()]]>
                          </content>
                        </script>
                        <pluginContent>
                          <language>English</language>
                          <tts use="0" />
                          <dialog use="0" />
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                        <Resource name="Speech recognition" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Marker Choice" id="10" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. The recognized answer is sent to the answer output.&#x0A;&#x0A;Note that you must open this box to enter the question text and the&#x0A;available answers." x="508" y="273">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                        <Output name="answer" type="3" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Choice" id="1" localization="8" tooltip="The Choice box is based on the dialog engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. Each recognized answer stimulate its&#x0A;corresponding output.&#x0A;Setting the choices in the box table:&#x0A;- Edit a choice by left double-clicking on its line.&#x0A;- Add a choice by right clicking on a line and selecting &apos;Insert a row&apos;.&#x0A;- Delete a choice by right clicking on its line and selecting &apos;Remove a row&apos;.&#x0A;- Write alternative answers for one choice by separating the phrases with &apos;/&apos; in the same line (e.g.: apple pie / pie / apple)." plugin="ui_choice_plugin" x="312" y="51">
                                  <bitmap>media/images/box/interaction/choice.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v9
# @author Desktop Application team
# (c) 2014 Aldebaran Robotics

import os
import tempfile
import shutil
import uuid
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.dialogIsRunning = False
        self.dialogIsLoaded = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.langDict = {
            "Arabic":"arw",
            "Czech":"czc",
            "Danish":"dad",
            "German":"ged",
            "Greek":"grg",
            "English":"enu",
            "Spanish":"spe",
            "Finnish":"fif",
            "French":"frf",
            "Italian":"iti",
            "Japanese":"jpj",
            "Korean":"kok",
            "Dutch":"dun",
            "Norwegian":"nor",
            "Polish":"plp",
            "Brazilian":"ptb",
            "Portuguese":"ptp",
            "Russian":"rur",
            "Swedish":"sws",
            "Turkish":"trt",
            "Chinese":"mnc",
            "MandarinTaiwan":"mnt"
        }
        # end - choices

        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aDialogChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 10
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")

# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # SERVICE INITIALIZATIONS
        self.animSpeech = self.session().service("ALAnimatedSpeech")
        self.tts = self.session().service("ALTextToSpeech")
        self.memory = self.session().service("ALMemory")
        self.motion = self.session().service("ALMotion")

        try:
            self.dcm = self.session().service( "DCM" )
        except:
            self.dcm = None

        try:
            self.dialog = self.session().service("ALDialog")
        except:
            self.dialog = None
            raise RuntimeError("Choice box cannot be launched, as Dialog is not available.")

        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True
        self.generateTopicFile()

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", ""], "Brazilian": ["sim", "não", ""], "Chinese": ["是", "不是", ""], "Czech": ["ano", "ne", ""], "Danish": ["ja", "nej", ""], "Dutch": ["ja", "nee", ""], "English": ["x", "o", ""], "Finnish": ["kyllä", "ei", ""], "French": ["oui", "non", ""], "German": ["ja", "nein", ""], "Greek": [], "Italian": ["sì", "no", ""], "Japanese": ["はい", "いいえ", ""], "Korean": ["예", "아니", ""], "MandarinTaiwan": ["是", "不是", ""], "Norwegian": [], "Polish": ["tak", "nie", ""], "Portuguese": ["sim", "não", ""], "Russian": ["да", "нет", ""], "Spanish": ["si", "no", ""], "Swedish": ["ja", "ingen", ""], "Turkish": ["evet", "hayır", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        language = self.tts.getLanguage()
        try:
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.getLocalizedStringList("TTS confirmation")
            self.getLocalizedStringList("TTS enumMarks")
            self.getLocalizedStringList("TTS helpEnumChoices")
            self.getLocalizedStringList("TTS helpEnumDefault")
            self.getLocalizedStringList("TTS helpTactile")
            self.getLocalizedStringList("TTS notUnderstood")
            self.getLocalizedStringList("TTS noQuestion")
            self.getLocalizedStringList("TTS notUnderstoodAnims")
        except Exception as e:
            raise Exception( "The current language is not supported by this Choice box. Internal sentences are missing for this language. (%s)" % e)
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.guid = ""
        self.lastHeadPos = None
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 10 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateBrainLight =  True
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.bodyLanguageMode = self.tryGetParameter( "Body language mode", "contextual" )
        self.dialog.setASRConfidenceThreshold(self.rUnderstoodThreshold )
        self.animSpeech.setBodyLanguageModeFromStr(self.bodyLanguageMode)
        self.aDefaultChoices = []
        self.aDialogDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.asHelpWords = self.removeUnauthorizedCharacters(self.asHelpWords)
            self.aDefaultChoices.append( self.asHelpWords )
            self.aDialogDefaultChoices += self.asHelpWords
        if (self.bActivateDefaultChoiceRepeat):
            self.asRepeatWords = self.removeUnauthorizedCharacters(self.asRepeatWords)
            self.aDefaultChoices.append( self.asRepeatWords )
            self.aDialogDefaultChoices += self.asRepeatWords
        if (self.bActivateDefaultChoiceExit):
            self.asExitWords = self.removeUnauthorizedCharacters(self.asExitWords)
            self.aDefaultChoices.append( self.asExitWords )
            self.aDialogDefaultChoices += self.asExitWords
        if( question == None ):
            question = ""
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        self.initQuestionAndChoices( question )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        if( not self.bGoOut ):
            self.questionRecognitionReaction()

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = self.tts.getLanguage()
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            self.aDialogDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
                self.aDialogDefaultChoices += self.asHelpWords
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
                self.aDialogDefaultChoices += self.asRepeatWords
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
                self.aDialogDefaultChoices += self.asExitWords
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aDialogChoices += choice
                    self.aChoiceIndexes.append( index )
                index += 1
            self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.animSpeech.stop(idtts)
            except:
                try:
                    self.tts.stop(idtts)
                except:
                    self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def removeIdTTS(self):
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

    def getLocalizedStringList(self, parameterName):
        return self.getParameter(parameterName).split("/")

    def removeUnauthorizedCharacters(self, wordList):
        wordList = [x.replace("'","") for x in wordList]
        return wordList

    def getLanguage(self):
        try:
            language = self.langDict[self.tts.getLanguage()]
        except:
            raise RuntimeError("Language " + self.tts.getLanguage() + " is not available for Choice box!")
        return language

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        language = self.getLanguage()
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aDialogChoices += aChoice
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )
        self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)
        self.sQuestion = [self.sQuestion]
# DIALOG ----------------------------------------------------------------------------------------------------

    def startDialog(self, activate = True):
        if self.bIsRunning:
            self.dialogIsRunning = True
            language = self.getLanguage()
            if not self.dialogIsLoaded:
                self.topics = []
                try:
                    for top in self.allTopicPaths:
                        topic = self.dialog._addDialogFromTopicBox(top, self.behaviorAbsolutePath())
                        self.topics.append(topic)
                        self.dialogIsLoaded = True
                except Exception as e:
                    print "Could not load topic " + str(e)
            if activate:
                try:
                    for top in self.topics:
                        if language in top.split("_")[-1]:
                            self.topic = top
                            self.guid = self.topic.split("_")[2]
                    self.dialog.setConcept("choices" + self.guid, language, self.aDialogChoices)
                    self.dialog.setConcept("question" + self.guid, language, self.sQuestion)
                    self.dialog.activateTopic(self.topic)
                    self.dialog.subscribe(self.getName())
                    thread.start_new_thread( self.loopLedsBrainTwinkle, () )
                except Exception as e:
                    print "Could not activate topic " + str(e)
                try:
                    self.memory.subscribeToEvent("Dialog/LastInput", self.getName(),"onDialogLastInput")
                    self.memory.subscribeToEvent("Dialog/NotSpeaking", self.getName(),"onDialogNotSpeaking")
                    self.memory.subscribeToEvent("Dialog/NotUnderstood", self.getName(),"onDialogNotUnderstood")
                except Exception as e:
                    print "Could not subscribe to event " + str(e)

    def stopDialog(self, unload=True):
        try:
            if unload:
                self.dialog.deactivateTopic(self.topic)
                for top in self.topics:
                    self.dialog.unloadTopic(top)
                self.dialogIsLoaded = False
            else:
                self.dialogIsRunning = False
            self.dialog.unsubscribe(self.getName())
        except Exception as e:
            print "Could not deactivate/unload topic " + str(e)
        try:
            self.memory.unsubscribeToEvent("Dialog/LastInput", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotSpeaking", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotUnderstood", self.getName())
        except Exception as e:
            print "Could not unsubscribe from Event " + str(e)

# DIALOG GENERATING --------------------------------------------------------------------------------------

    def generateTopicFile(self):
        self.directory = tempfile.mkdtemp()
        try:
            os.stat(self.directory)
        except:
            os.mkdir(self.directory)
        self.allTopicPaths = []
        for lang,dLang in self.langDict.iteritems():
            guid = str(uuid.uuid4())
            topicName = "dlg_choice_%s_%s.top" % (guid, dLang)
            topicPath = os.path.join(self.directory, topicName)
            self.allTopicPaths.append(topicPath)
            dialog = self.generateTopicContent(guid, dLang)
            with open(topicPath, 'w') as topic:
                topic.write(dialog)

    def generateTopicContent(self, guid, language):
        dialog = """topic: ~dlg_choice_%s_%s () \nlanguage: %s \ndynamic: question%s\ndynamic: choices%s\nu:(in:onActivation)  ~question%s \n\tu1:(~choices%s) $test=0 """ % (guid, language, language, guid, guid, guid, guid)
        return dialog

    def removeTopicFileDir(self):
        shutil.rmtree(self.directory)

# DIALOG OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onDialogLastInput(self, pDataName, pValue, pMessage):
        try:
            confidence = self.memory.getData("Dialog/Confidence")
        except:
            confidence = 0
        if pValue != "" and pValue in self.aDialogChoices:
            if confidence >= self.rConfirmationThreshold:
                self.sPreviousAnswer = pValue
                self.reactionWordUnderstood(pValue)
            else:
                self.stopDialog()
                self.sPreviousAnswer = pValue
                self.askConfirmation()
        else:
            if not self.bGoOut:
                if self.dialogIsRunning:
                    self.stopDialog(False)
                self.reactionNothingUnderstood()

    def onDialogNotSpeaking(self, pDataName, pValue, pMessage):
        if int(pValue) >= self.nTimeoutReco:
            if self.dialogIsRunning:
                self.stopDialog(False)
            self.sRecoInterruption = "timeout"

    def onDialogNotUnderstood(self, pDataName, pValue, pMessage):
        if self.dialogIsRunning:
            self.stopDialog(False)
        self.reactionNothingUnderstood()

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        if not self.dialogIsRunning:
            self.startDialog(True)
        self.processRecoInterruption()

    def askConfirmation(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        self.bInConfirmation = True
        sentence = self.getLocalizedStringList("TTS confirmation")[0]
        idTTS = -1
        sentenceToSay = sentence % self.sPreviousAnswer
        if( sentenceToSay != ""):
            idTTS = self.animSpeech.pCall("say", sentenceToSay )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentenceToSay) )
        # prepare speech recognition
        aWordsRecognised = []
        aWordsRecognised.extend( self.asNegativeWords )
        aWordsRecognised.extend( self.asPositiveWords )
        sWordsRecognised = "You can say: "
        if( len( aWordsRecognised ) > 1 ):
            for i in range( len( aWordsRecognised ) - 1 ):
                sWordsRecognised += "'" + aWordsRecognised[i] + "', "
        if( len( aWordsRecognised ) > 0 ):
            sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
        sWordsRecognised += "."
        self.logger.debug( sWordsRecognised )
        self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the animSpeech." )
        self.startDialog()

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.stopDialog()
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    self.startDialog()
                    self.sRecoInterruption = ""
                    self.processRecoInterruption()
        else:
            self.nCountNoReply = 0
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.getLocalizedStringList("TTS noQuestion")[0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.animSpeech.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )
        if not self.dialogIsRunning:
            self.bInTactileSensorMenu = False
            self.startDialog()

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        self.headDefault()
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word
            if( self.sPreviousAnswer in self.asHelpWords ):
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ):
                self.repeatWhenNoQuestion()
                # repeat the question
            else:
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
            self.sPreviousAnswer = ""

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.getLocalizedStringList("TTS notUnderstood")[0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.getLocalizedStringList("TTS notUnderstoodAnims")
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumDefault = self.getLocalizedStringList("TTS helpEnumDefault")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.getLocalizedStringList("TTS helpTactile")
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.animSpeech.pCall("say", sentence + "\\Pau=300\\" )
                self.bInTactileSensorMenu = False
            else:
                idTTS = self.animSpeech.pCall("say", sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question
        if not self.dialogIsRunning:
            self.startDialog()

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.animSpeech.pCall("say", sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.animSpeech.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
            if not self.dialogIsRunning:
                self.startDialog()
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDs ----------------------------------------------------------------------------------------------------

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLedsBrain( 0., 500 )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLedsBrain( 0.5, 500 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# ANIMATIONS ----------------------------------------------------------------------------------------------

    def headDown(self):
        names = []
        times = []
        keys = []
        names.append("HeadPitch")
        times.append([1.24])
        keys.append([[0.392662, [3, -0.413333, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.24])
        keys.append([[-0.027654, [3, -0.413333, 0], [3, 0, 0]]])
        try:
            self.motion.angleInterpolationBezier(names, times, keys)
            self.lastHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        except BaseException, err:
          print err

    def headDefault(self):
        currentHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        if currentHeadPos != self.lastHeadPos:
            return
        names = []
        times = []
        keys = []

        names.append("HeadPitch")
        times.append([1.2])
        keys.append([[-0.194861, [3, -0.4, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.2])
        keys.append([[-0.00771196, [3, -0.4, 0], [3, 0, 0]]])

        try:
            self.motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                self.headDown()
                thread.start_new_thread(self.loopLedsBrainTurn, ())
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) or self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    self.reactionWordUnderstood( self.aChoices[self.nIndexChoice][0] )
                    self.rTimeWhenActionMadeInTactileMenu = -1
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        self.headDown()
        sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
        idTTS = self.tts.pCall("say", sentence )
        self.aIdsTTS.append( idTTS )
        self.logger.debug( "Robot says: " + str(sentence) )
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.animSpeech.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.stopDialog(False)
        self.nCountNoReply = 0
        self.lastTimeoutVal = 0
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bInTactileSensorMenu = False
        self.bIsRunning = False
        self.goOutOfQuestionRecoReaction()

        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        if self.dialogIsRunning:
            self.stopDialog(False)
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.stopDialog()
        language = self.getLanguage()
        #reset concepts to reduce loading time
        try:
            self.dialog.setConcept("choices" + self.guid, language, [])
            self.dialog.setConcept("question" + self.guid, language, [])
        except Exception as e:
            print "Could not empty concept " + str(e)
        try:
            self.removeTopicFileDir()
        except Exception as e:
            print "Could not remove temporary topic file directory " + str(e)
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic" nuanceCode="arw">
                                      <keyword>نعم</keyword>
                                      <keyword>لا</keyword>
                                      <keyword></keyword>
                                    </arabic>
                                    <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian" nuanceCode="ptb">
                                      <keyword>sim</keyword>
                                      <keyword>não</keyword>
                                      <keyword></keyword>
                                    </brazilian>
                                    <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese" nuanceCode="mnc">
                                      <keyword>是</keyword>
                                      <keyword>不是</keyword>
                                      <keyword></keyword>
                                    </chinese>
                                    <czech uiName="‎Český Jazyk (Czech)" languageName="Czech" nuanceCode="czc">
                                      <keyword>ano</keyword>
                                      <keyword>ne</keyword>
                                      <keyword></keyword>
                                    </czech>
                                    <danish uiName="‎Dansk (Danish)" languageName="Danish" nuanceCode="dad">
                                      <keyword>ja</keyword>
                                      <keyword>nej</keyword>
                                      <keyword></keyword>
                                    </danish>
                                    <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch" nuanceCode="dun">
                                      <keyword>ja</keyword>
                                      <keyword>nee</keyword>
                                      <keyword></keyword>
                                    </dutch>
                                    <english uiName="‎American English (American English)" languageName="English" nuanceCode="enu">
                                      <keyword>x</keyword>
                                      <keyword>o</keyword>
                                      <keyword></keyword>
                                    </english>
                                    <finnish uiName="‎Suomi (Finnish)" languageName="Finnish" nuanceCode="fif">
                                      <keyword>kyllä</keyword>
                                      <keyword>ei</keyword>
                                      <keyword></keyword>
                                    </finnish>
                                    <french uiName="‎Français (French)" languageName="French" nuanceCode="frf">
                                      <keyword>oui</keyword>
                                      <keyword>non</keyword>
                                      <keyword></keyword>
                                    </french>
                                    <german uiName="‎Deutsch (German)" languageName="German" nuanceCode="ged">
                                      <keyword>ja</keyword>
                                      <keyword>nein</keyword>
                                      <keyword></keyword>
                                    </german>
                                    <greek uiName="‎Ελληνικά (Greek)" languageName="Greek" nuanceCode="grg" />
                                    <italian uiName="‎Italiano (Italian)" languageName="Italian" nuanceCode="iti">
                                      <keyword>sì</keyword>
                                      <keyword>no</keyword>
                                      <keyword></keyword>
                                    </italian>
                                    <japanese uiName="‎日本語 (Japanese)" languageName="Japanese" nuanceCode="jpj">
                                      <keyword>はい</keyword>
                                      <keyword>いいえ</keyword>
                                      <keyword></keyword>
                                    </japanese>
                                    <korean uiName="‎한국어 (Korean)" languageName="Korean" nuanceCode="kok">
                                      <keyword>예</keyword>
                                      <keyword>아니</keyword>
                                      <keyword></keyword>
                                    </korean>
                                    <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan" nuanceCode="mnt">
                                      <keyword>是</keyword>
                                      <keyword>不是</keyword>
                                      <keyword></keyword>
                                    </mandarintaiwan>
                                    <norwegian uiName="‎Norsk (Norwegian)" languageName="Norwegian" nuanceCode="nor" />
                                    <polish uiName="‎Język polski (Polish)" languageName="Polish" nuanceCode="plp">
                                      <keyword>tak</keyword>
                                      <keyword>nie</keyword>
                                      <keyword></keyword>
                                    </polish>
                                    <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese" nuanceCode="ptp">
                                      <keyword>sim</keyword>
                                      <keyword>não</keyword>
                                      <keyword></keyword>
                                    </portuguese>
                                    <russian uiName="‎Русский (Russian)" languageName="Russian" nuanceCode="rur">
                                      <keyword>да</keyword>
                                      <keyword>нет</keyword>
                                      <keyword></keyword>
                                    </russian>
                                    <spanish uiName="‎Español (Spanish)" languageName="Spanish" nuanceCode="spe">
                                      <keyword>si</keyword>
                                      <keyword>no</keyword>
                                      <keyword></keyword>
                                    </spanish>
                                    <swedish uiName="‎Svenska (Swedish)" languageName="Swedish" nuanceCode="sws">
                                      <keyword>ja</keyword>
                                      <keyword>ingen</keyword>
                                      <keyword></keyword>
                                    </swedish>
                                    <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish" nuanceCode="trt">
                                      <keyword>evet</keyword>
                                      <keyword>hayır</keyword>
                                      <keyword></keyword>
                                    </turkish>
                                    <language>english</language>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                  <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip='To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;eg [[&quot;yes&quot;,&quot;ok&quot;],&quot;no&quot;,&quot;maybe&quot;]&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected.' id="3" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                  <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                  <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                  <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                  <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="8" />
                                  <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="9" />
                                  <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="10" />
                                  <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="11" />
                                  <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="12" />
                                  <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="13" />
                                  <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="6" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="14" />
                                  <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="15" />
                                  <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="16" />
                                  <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="17" />
                                  <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="18" />
                                  <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="19" />
                                  <Parameter name="Body language mode" inherits_from_parent="0" content_type="3" value="disabled" default_value="contextual" custom_choice="0" tooltip="" id="20">
                                    <Choice value="contextual" />
                                    <Choice value="random" />
                                    <Choice value="disabled" />
                                  </Parameter>
                                  <Parameter name="SpeechReco negative" inherits_from_parent="0" content_type="5" value="no/no nao/disagree/I disagree" default_value="no/no nao/disagree/I disagree" tooltip="" id="21" />
                                  <Parameter name="SpeechReco positive" inherits_from_parent="0" content_type="5" value="yes/yes nao/agree/I agree/of course" default_value="yes/yes nao/agree/I agree/of course" tooltip="" id="22" />
                                  <Parameter name="SpeechReco help" inherits_from_parent="0" content_type="5" value="help/help me/i don&apos;t know" default_value="help/help me/i don&apos;t know" tooltip="" id="23" />
                                  <Parameter name="SpeechReco exit" inherits_from_parent="0" content_type="5" value="exit/stop/quit" default_value="exit/stop/quit" tooltip="" id="24" />
                                  <Parameter name="SpeechReco repeat" inherits_from_parent="0" content_type="5" value="repeat/pardon/what/excuse me" default_value="repeat/pardon/what/excuse me" tooltip="" id="25" />
                                  <Parameter name="TTS confirmation" inherits_from_parent="0" content_type="5" value="I understood %s. Is that correct?" default_value="I understood %s. Is that correct?" tooltip="" id="26" />
                                  <Parameter name="TTS enumMarks" inherits_from_parent="0" content_type="5" value=", / or " default_value=", / or " tooltip="" id="27" />
                                  <Parameter name="TTS helpEnumChoices" inherits_from_parent="0" content_type="5" value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" default_value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" tooltip="" id="28" />
                                  <Parameter name="TTS helpEnumDefault" inherits_from_parent="0" content_type="5" value=" you can ask me: %s. " default_value=" you can ask me: %s. " tooltip="" id="29" />
                                  <Parameter name="TTS helpTactile" inherits_from_parent="0" content_type="5" value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." default_value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." tooltip="" id="30" />
                                  <Parameter name="TTS notUnderstood" inherits_from_parent="0" content_type="5" value="I did not understand. " default_value="I did not understand. " tooltip="" id="31" />
                                  <Parameter name="TTS noQuestion" inherits_from_parent="0" content_type="5" value="No question has been defined, so I cannot repeat it. " default_value="No question has been defined, so I cannot repeat it. " tooltip="" id="32" />
                                  <Parameter name="TTS notUnderstoodAnims" inherits_from_parent="0" content_type="5" value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " default_value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " tooltip="" id="33" />
                                </Box>
                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.sentences = {
			"Chinese" : " 你喜欢吃巧克力吗？ ",
			"English" : " Would you like to be x or o? ",
			"French" : " Aimes-tu le chocolat ? ",
			"German" : " Mögen Sie Schokolade? ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Arabic" : " هل تحب الشوكولاته؟ ",
			"Polish" : " Lubisz czekoladę? ",
			"Czech" : " Máš rád čokoládu? ",
			"Dutch" : " Hou je van chocolade? ",
			"Danish" : " Kan du lide chokolade? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"Swedish" : " Gillar du choklad? ",
			"Russian" : " Вы любите шоколад? ",
			"Turkish" : " Çikolata sever misin? ",
			"MandarinTaiwan" : " 你喜歡吃巧克力嗎？ ",
		}

	def onLoad(self):
		self.tts = self.session().service("ALTextToSpeech")

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese">
                                      <![CDATA[你喜欢吃巧克力吗？]]>
                                    </chinese>
                                    <english uiName="‎American English (American English)" languageName="English">
                                      <![CDATA[Would you like to be x or o?]]>
                                    </english>
                                    <french uiName="‎Français (French)" languageName="French">
                                      <![CDATA[Aimes-tu le chocolat ?]]>
                                    </french>
                                    <german uiName="‎Deutsch (German)" languageName="German">
                                      <![CDATA[Mögen Sie Schokolade?]]>
                                    </german>
                                    <italian uiName="‎Italiano (Italian)" languageName="Italian">
                                      <![CDATA[Ti piace il cioccolato?]]>
                                    </italian>
                                    <japanese uiName="‎日本語 (Japanese)" languageName="Japanese">
                                      <![CDATA[チョコレートが好きですか]]>
                                    </japanese>
                                    <korean uiName="‎한국어 (Korean)" languageName="Korean">
                                      <![CDATA[당신은 초콜렛을 좋아합니까?]]>
                                    </korean>
                                    <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese">
                                      <![CDATA[Gostas de chocolate?]]>
                                    </portuguese>
                                    <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian">
                                      <![CDATA[Você gosta de chocolate?]]>
                                    </brazilian>
                                    <spanish uiName="‎Español (Spanish)" languageName="Spanish">
                                      <![CDATA[¿Te gusta el chocolate?]]>
                                    </spanish>
                                    <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic">
                                      <![CDATA[هل تحب الشوكولاته؟]]>
                                    </arabic>
                                    <polish uiName="‎Język polski (Polish)" languageName="Polish">
                                      <![CDATA[Lubisz czekoladę?]]>
                                    </polish>
                                    <czech uiName="‎Český Jazyk (Czech)" languageName="Czech">
                                      <![CDATA[Máš rád čokoládu?]]>
                                    </czech>
                                    <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch">
                                      <![CDATA[Hou je van chocolade?]]>
                                    </dutch>
                                    <danish uiName="‎Dansk (Danish)" languageName="Danish">
                                      <![CDATA[Kan du lide chokolade?]]>
                                    </danish>
                                    <finnish uiName="‎Suomi (Finnish)" languageName="Finnish">
                                      <![CDATA[Pidätkö suklaasta?]]>
                                    </finnish>
                                    <swedish uiName="‎Svenska (Swedish)" languageName="Swedish">
                                      <![CDATA[Gillar du choklad?]]>
                                    </swedish>
                                    <russian uiName="‎Русский (Russian)" languageName="Russian">
                                      <![CDATA[Вы любите шоколад?]]>
                                    </russian>
                                    <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish">
                                      <![CDATA[Çikolata sever misin?]]>
                                    </turkish>
                                    <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan">
                                      <![CDATA[你喜歡吃巧克力嗎？]]>
                                    </mandarintaiwan>
                                    <language>english</language>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                </Box>
                                <Box name="Log" id="2" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="696" y="90">
                                  <bitmap>media/images/box/print.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="Message text" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                  <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                    <Choice value="Fatal" />
                                    <Choice value="Error" />
                                    <Choice value="Warning" />
                                    <Choice value="Info" />
                                    <Choice value="Debug" />
                                  </Parameter>
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="7" />
                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="3" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Turn Choice" id="3" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. The recognized answer is sent to the answer output.&#x0A;&#x0A;Note that you must open this box to enter the question text and the&#x0A;available answers." x="800" y="343">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                        <Output name="answer" type="3" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Choice" id="1" localization="8" tooltip="The Choice box is based on the dialog engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. Each recognized answer stimulate its&#x0A;corresponding output.&#x0A;Setting the choices in the box table:&#x0A;- Edit a choice by left double-clicking on its line.&#x0A;- Add a choice by right clicking on a line and selecting &apos;Insert a row&apos;.&#x0A;- Delete a choice by right clicking on its line and selecting &apos;Remove a row&apos;.&#x0A;- Write alternative answers for one choice by separating the phrases with &apos;/&apos; in the same line (e.g.: apple pie / pie / apple)." plugin="ui_choice_plugin" x="312" y="51">
                                  <bitmap>media/images/box/interaction/choice.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v9
# @author Desktop Application team
# (c) 2014 Aldebaran Robotics

import os
import tempfile
import shutil
import uuid
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.dialogIsRunning = False
        self.dialogIsLoaded = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.langDict = {
            "Arabic":"arw",
            "Czech":"czc",
            "Danish":"dad",
            "German":"ged",
            "Greek":"grg",
            "English":"enu",
            "Spanish":"spe",
            "Finnish":"fif",
            "French":"frf",
            "Italian":"iti",
            "Japanese":"jpj",
            "Korean":"kok",
            "Dutch":"dun",
            "Norwegian":"nor",
            "Polish":"plp",
            "Brazilian":"ptb",
            "Portuguese":"ptp",
            "Russian":"rur",
            "Swedish":"sws",
            "Turkish":"trt",
            "Chinese":"mnc",
            "MandarinTaiwan":"mnt"
        }
        # end - choices

        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aDialogChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 10
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")

# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # SERVICE INITIALIZATIONS
        self.animSpeech = self.session().service("ALAnimatedSpeech")
        self.tts = self.session().service("ALTextToSpeech")
        self.memory = self.session().service("ALMemory")
        self.motion = self.session().service("ALMotion")

        try:
            self.dcm = self.session().service( "DCM" )
        except:
            self.dcm = None

        try:
            self.dialog = self.session().service("ALDialog")
        except:
            self.dialog = None
            raise RuntimeError("Choice box cannot be launched, as Dialog is not available.")

        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True
        self.generateTopicFile()

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", ""], "Brazilian": ["sim", "não", ""], "Chinese": ["是", "不是", ""], "Czech": ["ano", "ne", ""], "Danish": ["ja", "nej", ""], "Dutch": ["ja", "nee", ""], "English": ["first", "second", ""], "Finnish": ["kyllä", "ei", ""], "French": ["oui", "non", ""], "German": ["ja", "nein", ""], "Greek": [], "Italian": ["sì", "no", ""], "Japanese": ["はい", "いいえ", ""], "Korean": ["예", "아니", ""], "MandarinTaiwan": ["是", "不是", ""], "Norwegian": [], "Polish": ["tak", "nie", ""], "Portuguese": ["sim", "não", ""], "Russian": ["да", "нет", ""], "Spanish": ["si", "no", ""], "Swedish": ["ja", "ingen", ""], "Turkish": ["evet", "hayır", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        language = self.tts.getLanguage()
        try:
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.getLocalizedStringList("TTS confirmation")
            self.getLocalizedStringList("TTS enumMarks")
            self.getLocalizedStringList("TTS helpEnumChoices")
            self.getLocalizedStringList("TTS helpEnumDefault")
            self.getLocalizedStringList("TTS helpTactile")
            self.getLocalizedStringList("TTS notUnderstood")
            self.getLocalizedStringList("TTS noQuestion")
            self.getLocalizedStringList("TTS notUnderstoodAnims")
        except Exception as e:
            raise Exception( "The current language is not supported by this Choice box. Internal sentences are missing for this language. (%s)" % e)
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.guid = ""
        self.lastHeadPos = None
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 10 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateBrainLight =  True
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.bodyLanguageMode = self.tryGetParameter( "Body language mode", "contextual" )
        self.dialog.setASRConfidenceThreshold(self.rUnderstoodThreshold )
        self.animSpeech.setBodyLanguageModeFromStr(self.bodyLanguageMode)
        self.aDefaultChoices = []
        self.aDialogDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.asHelpWords = self.removeUnauthorizedCharacters(self.asHelpWords)
            self.aDefaultChoices.append( self.asHelpWords )
            self.aDialogDefaultChoices += self.asHelpWords
        if (self.bActivateDefaultChoiceRepeat):
            self.asRepeatWords = self.removeUnauthorizedCharacters(self.asRepeatWords)
            self.aDefaultChoices.append( self.asRepeatWords )
            self.aDialogDefaultChoices += self.asRepeatWords
        if (self.bActivateDefaultChoiceExit):
            self.asExitWords = self.removeUnauthorizedCharacters(self.asExitWords)
            self.aDefaultChoices.append( self.asExitWords )
            self.aDialogDefaultChoices += self.asExitWords
        if( question == None ):
            question = ""
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        self.initQuestionAndChoices( question )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        if( not self.bGoOut ):
            self.questionRecognitionReaction()

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = self.tts.getLanguage()
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            self.aDialogDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
                self.aDialogDefaultChoices += self.asHelpWords
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
                self.aDialogDefaultChoices += self.asRepeatWords
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
                self.aDialogDefaultChoices += self.asExitWords
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aDialogChoices += choice
                    self.aChoiceIndexes.append( index )
                index += 1
            self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.animSpeech.stop(idtts)
            except:
                try:
                    self.tts.stop(idtts)
                except:
                    self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def removeIdTTS(self):
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

    def getLocalizedStringList(self, parameterName):
        return self.getParameter(parameterName).split("/")

    def removeUnauthorizedCharacters(self, wordList):
        wordList = [x.replace("'","") for x in wordList]
        return wordList

    def getLanguage(self):
        try:
            language = self.langDict[self.tts.getLanguage()]
        except:
            raise RuntimeError("Language " + self.tts.getLanguage() + " is not available for Choice box!")
        return language

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        language = self.getLanguage()
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aDialogChoices += aChoice
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )
        self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)
        self.sQuestion = [self.sQuestion]
# DIALOG ----------------------------------------------------------------------------------------------------

    def startDialog(self, activate = True):
        if self.bIsRunning:
            self.dialogIsRunning = True
            language = self.getLanguage()
            if not self.dialogIsLoaded:
                self.topics = []
                try:
                    for top in self.allTopicPaths:
                        topic = self.dialog._addDialogFromTopicBox(top, self.behaviorAbsolutePath())
                        self.topics.append(topic)
                        self.dialogIsLoaded = True
                except Exception as e:
                    print "Could not load topic " + str(e)
            if activate:
                try:
                    for top in self.topics:
                        if language in top.split("_")[-1]:
                            self.topic = top
                            self.guid = self.topic.split("_")[2]
                    self.dialog.setConcept("choices" + self.guid, language, self.aDialogChoices)
                    self.dialog.setConcept("question" + self.guid, language, self.sQuestion)
                    self.dialog.activateTopic(self.topic)
                    self.dialog.subscribe(self.getName())
                    thread.start_new_thread( self.loopLedsBrainTwinkle, () )
                except Exception as e:
                    print "Could not activate topic " + str(e)
                try:
                    self.memory.subscribeToEvent("Dialog/LastInput", self.getName(),"onDialogLastInput")
                    self.memory.subscribeToEvent("Dialog/NotSpeaking", self.getName(),"onDialogNotSpeaking")
                    self.memory.subscribeToEvent("Dialog/NotUnderstood", self.getName(),"onDialogNotUnderstood")
                except Exception as e:
                    print "Could not subscribe to event " + str(e)

    def stopDialog(self, unload=True):
        try:
            if unload:
                self.dialog.deactivateTopic(self.topic)
                for top in self.topics:
                    self.dialog.unloadTopic(top)
                self.dialogIsLoaded = False
            else:
                self.dialogIsRunning = False
            self.dialog.unsubscribe(self.getName())
        except Exception as e:
            print "Could not deactivate/unload topic " + str(e)
        try:
            self.memory.unsubscribeToEvent("Dialog/LastInput", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotSpeaking", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotUnderstood", self.getName())
        except Exception as e:
            print "Could not unsubscribe from Event " + str(e)

# DIALOG GENERATING --------------------------------------------------------------------------------------

    def generateTopicFile(self):
        self.directory = tempfile.mkdtemp()
        try:
            os.stat(self.directory)
        except:
            os.mkdir(self.directory)
        self.allTopicPaths = []
        for lang,dLang in self.langDict.iteritems():
            guid = str(uuid.uuid4())
            topicName = "dlg_choice_%s_%s.top" % (guid, dLang)
            topicPath = os.path.join(self.directory, topicName)
            self.allTopicPaths.append(topicPath)
            dialog = self.generateTopicContent(guid, dLang)
            with open(topicPath, 'w') as topic:
                topic.write(dialog)

    def generateTopicContent(self, guid, language):
        dialog = """topic: ~dlg_choice_%s_%s () \nlanguage: %s \ndynamic: question%s\ndynamic: choices%s\nu:(in:onActivation)  ~question%s \n\tu1:(~choices%s) $test=0 """ % (guid, language, language, guid, guid, guid, guid)
        return dialog

    def removeTopicFileDir(self):
        shutil.rmtree(self.directory)

# DIALOG OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onDialogLastInput(self, pDataName, pValue, pMessage):
        try:
            confidence = self.memory.getData("Dialog/Confidence")
        except:
            confidence = 0
        if pValue != "" and pValue in self.aDialogChoices:
            if confidence >= self.rConfirmationThreshold:
                self.sPreviousAnswer = pValue
                self.reactionWordUnderstood(pValue)
            else:
                self.stopDialog()
                self.sPreviousAnswer = pValue
                self.askConfirmation()
        else:
            if not self.bGoOut:
                if self.dialogIsRunning:
                    self.stopDialog(False)
                self.reactionNothingUnderstood()

    def onDialogNotSpeaking(self, pDataName, pValue, pMessage):
        if int(pValue) >= self.nTimeoutReco:
            if self.dialogIsRunning:
                self.stopDialog(False)
            self.sRecoInterruption = "timeout"

    def onDialogNotUnderstood(self, pDataName, pValue, pMessage):
        if self.dialogIsRunning:
            self.stopDialog(False)
        self.reactionNothingUnderstood()

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        if not self.dialogIsRunning:
            self.startDialog(True)
        self.processRecoInterruption()

    def askConfirmation(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        self.bInConfirmation = True
        sentence = self.getLocalizedStringList("TTS confirmation")[0]
        idTTS = -1
        sentenceToSay = sentence % self.sPreviousAnswer
        if( sentenceToSay != ""):
            idTTS = self.animSpeech.pCall("say", sentenceToSay )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentenceToSay) )
        # prepare speech recognition
        aWordsRecognised = []
        aWordsRecognised.extend( self.asNegativeWords )
        aWordsRecognised.extend( self.asPositiveWords )
        sWordsRecognised = "You can say: "
        if( len( aWordsRecognised ) > 1 ):
            for i in range( len( aWordsRecognised ) - 1 ):
                sWordsRecognised += "'" + aWordsRecognised[i] + "', "
        if( len( aWordsRecognised ) > 0 ):
            sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
        sWordsRecognised += "."
        self.logger.debug( sWordsRecognised )
        self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the animSpeech." )
        self.startDialog()

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.stopDialog()
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    self.startDialog()
                    self.sRecoInterruption = ""
                    self.processRecoInterruption()
        else:
            self.nCountNoReply = 0
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.getLocalizedStringList("TTS noQuestion")[0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.animSpeech.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )
        if not self.dialogIsRunning:
            self.bInTactileSensorMenu = False
            self.startDialog()

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        self.headDefault()
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word
            if( self.sPreviousAnswer in self.asHelpWords ):
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ):
                self.repeatWhenNoQuestion()
                # repeat the question
            else:
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
            self.sPreviousAnswer = ""

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.getLocalizedStringList("TTS notUnderstood")[0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.getLocalizedStringList("TTS notUnderstoodAnims")
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumDefault = self.getLocalizedStringList("TTS helpEnumDefault")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.getLocalizedStringList("TTS helpTactile")
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.animSpeech.pCall("say", sentence + "\\Pau=300\\" )
                self.bInTactileSensorMenu = False
            else:
                idTTS = self.animSpeech.pCall("say", sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question
        if not self.dialogIsRunning:
            self.startDialog()

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.animSpeech.pCall("say", sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.animSpeech.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
            if not self.dialogIsRunning:
                self.startDialog()
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDs ----------------------------------------------------------------------------------------------------

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLedsBrain( 0., 500 )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLedsBrain( 0.5, 500 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# ANIMATIONS ----------------------------------------------------------------------------------------------

    def headDown(self):
        names = []
        times = []
        keys = []
        names.append("HeadPitch")
        times.append([1.24])
        keys.append([[0.392662, [3, -0.413333, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.24])
        keys.append([[-0.027654, [3, -0.413333, 0], [3, 0, 0]]])
        try:
            self.motion.angleInterpolationBezier(names, times, keys)
            self.lastHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        except BaseException, err:
          print err

    def headDefault(self):
        currentHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        if currentHeadPos != self.lastHeadPos:
            return
        names = []
        times = []
        keys = []

        names.append("HeadPitch")
        times.append([1.2])
        keys.append([[-0.194861, [3, -0.4, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.2])
        keys.append([[-0.00771196, [3, -0.4, 0], [3, 0, 0]]])

        try:
            self.motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                self.headDown()
                thread.start_new_thread(self.loopLedsBrainTurn, ())
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) or self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    self.reactionWordUnderstood( self.aChoices[self.nIndexChoice][0] )
                    self.rTimeWhenActionMadeInTactileMenu = -1
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        self.headDown()
        sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
        idTTS = self.tts.pCall("say", sentence )
        self.aIdsTTS.append( idTTS )
        self.logger.debug( "Robot says: " + str(sentence) )
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.animSpeech.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.stopDialog(False)
        self.nCountNoReply = 0
        self.lastTimeoutVal = 0
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bInTactileSensorMenu = False
        self.bIsRunning = False
        self.goOutOfQuestionRecoReaction()

        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        if self.dialogIsRunning:
            self.stopDialog(False)
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.stopDialog()
        language = self.getLanguage()
        #reset concepts to reduce loading time
        try:
            self.dialog.setConcept("choices" + self.guid, language, [])
            self.dialog.setConcept("question" + self.guid, language, [])
        except Exception as e:
            print "Could not empty concept " + str(e)
        try:
            self.removeTopicFileDir()
        except Exception as e:
            print "Could not remove temporary topic file directory " + str(e)
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic" nuanceCode="arw">
                                      <keyword>نعم</keyword>
                                      <keyword>لا</keyword>
                                      <keyword></keyword>
                                    </arabic>
                                    <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian" nuanceCode="ptb">
                                      <keyword>sim</keyword>
                                      <keyword>não</keyword>
                                      <keyword></keyword>
                                    </brazilian>
                                    <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese" nuanceCode="mnc">
                                      <keyword>是</keyword>
                                      <keyword>不是</keyword>
                                      <keyword></keyword>
                                    </chinese>
                                    <czech uiName="‎Český Jazyk (Czech)" languageName="Czech" nuanceCode="czc">
                                      <keyword>ano</keyword>
                                      <keyword>ne</keyword>
                                      <keyword></keyword>
                                    </czech>
                                    <danish uiName="‎Dansk (Danish)" languageName="Danish" nuanceCode="dad">
                                      <keyword>ja</keyword>
                                      <keyword>nej</keyword>
                                      <keyword></keyword>
                                    </danish>
                                    <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch" nuanceCode="dun">
                                      <keyword>ja</keyword>
                                      <keyword>nee</keyword>
                                      <keyword></keyword>
                                    </dutch>
                                    <english uiName="‎American English (American English)" languageName="English" nuanceCode="enu">
                                      <keyword>first</keyword>
                                      <keyword>second</keyword>
                                      <keyword></keyword>
                                    </english>
                                    <finnish uiName="‎Suomi (Finnish)" languageName="Finnish" nuanceCode="fif">
                                      <keyword>kyllä</keyword>
                                      <keyword>ei</keyword>
                                      <keyword></keyword>
                                    </finnish>
                                    <french uiName="‎Français (French)" languageName="French" nuanceCode="frf">
                                      <keyword>oui</keyword>
                                      <keyword>non</keyword>
                                      <keyword></keyword>
                                    </french>
                                    <german uiName="‎Deutsch (German)" languageName="German" nuanceCode="ged">
                                      <keyword>ja</keyword>
                                      <keyword>nein</keyword>
                                      <keyword></keyword>
                                    </german>
                                    <greek uiName="‎Ελληνικά (Greek)" languageName="Greek" nuanceCode="grg" />
                                    <italian uiName="‎Italiano (Italian)" languageName="Italian" nuanceCode="iti">
                                      <keyword>sì</keyword>
                                      <keyword>no</keyword>
                                      <keyword></keyword>
                                    </italian>
                                    <japanese uiName="‎日本語 (Japanese)" languageName="Japanese" nuanceCode="jpj">
                                      <keyword>はい</keyword>
                                      <keyword>いいえ</keyword>
                                      <keyword></keyword>
                                    </japanese>
                                    <korean uiName="‎한국어 (Korean)" languageName="Korean" nuanceCode="kok">
                                      <keyword>예</keyword>
                                      <keyword>아니</keyword>
                                      <keyword></keyword>
                                    </korean>
                                    <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan" nuanceCode="mnt">
                                      <keyword>是</keyword>
                                      <keyword>不是</keyword>
                                      <keyword></keyword>
                                    </mandarintaiwan>
                                    <norwegian uiName="‎Norsk (Norwegian)" languageName="Norwegian" nuanceCode="nor" />
                                    <polish uiName="‎Język polski (Polish)" languageName="Polish" nuanceCode="plp">
                                      <keyword>tak</keyword>
                                      <keyword>nie</keyword>
                                      <keyword></keyword>
                                    </polish>
                                    <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese" nuanceCode="ptp">
                                      <keyword>sim</keyword>
                                      <keyword>não</keyword>
                                      <keyword></keyword>
                                    </portuguese>
                                    <russian uiName="‎Русский (Russian)" languageName="Russian" nuanceCode="rur">
                                      <keyword>да</keyword>
                                      <keyword>нет</keyword>
                                      <keyword></keyword>
                                    </russian>
                                    <spanish uiName="‎Español (Spanish)" languageName="Spanish" nuanceCode="spe">
                                      <keyword>si</keyword>
                                      <keyword>no</keyword>
                                      <keyword></keyword>
                                    </spanish>
                                    <swedish uiName="‎Svenska (Swedish)" languageName="Swedish" nuanceCode="sws">
                                      <keyword>ja</keyword>
                                      <keyword>ingen</keyword>
                                      <keyword></keyword>
                                    </swedish>
                                    <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish" nuanceCode="trt">
                                      <keyword>evet</keyword>
                                      <keyword>hayır</keyword>
                                      <keyword></keyword>
                                    </turkish>
                                    <language>english</language>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                  <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip='To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;eg [[&quot;yes&quot;,&quot;ok&quot;],&quot;no&quot;,&quot;maybe&quot;]&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected.' id="3" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                  <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                  <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                  <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                  <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="8" />
                                  <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="9" />
                                  <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="10" />
                                  <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="11" />
                                  <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="12" />
                                  <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="13" />
                                  <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="6" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="14" />
                                  <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="15" />
                                  <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="16" />
                                  <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="17" />
                                  <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="18" />
                                  <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="19" />
                                  <Parameter name="Body language mode" inherits_from_parent="0" content_type="3" value="disabled" default_value="contextual" custom_choice="0" tooltip="" id="20">
                                    <Choice value="contextual" />
                                    <Choice value="random" />
                                    <Choice value="disabled" />
                                  </Parameter>
                                  <Parameter name="SpeechReco negative" inherits_from_parent="0" content_type="5" value="no/no nao/disagree/I disagree" default_value="no/no nao/disagree/I disagree" tooltip="" id="21" />
                                  <Parameter name="SpeechReco positive" inherits_from_parent="0" content_type="5" value="yes/yes nao/agree/I agree/of course" default_value="yes/yes nao/agree/I agree/of course" tooltip="" id="22" />
                                  <Parameter name="SpeechReco help" inherits_from_parent="0" content_type="5" value="help/help me/i don&apos;t know" default_value="help/help me/i don&apos;t know" tooltip="" id="23" />
                                  <Parameter name="SpeechReco exit" inherits_from_parent="0" content_type="5" value="exit/stop/quit" default_value="exit/stop/quit" tooltip="" id="24" />
                                  <Parameter name="SpeechReco repeat" inherits_from_parent="0" content_type="5" value="repeat/pardon/what/excuse me" default_value="repeat/pardon/what/excuse me" tooltip="" id="25" />
                                  <Parameter name="TTS confirmation" inherits_from_parent="0" content_type="5" value="I understood %s. Is that correct?" default_value="I understood %s. Is that correct?" tooltip="" id="26" />
                                  <Parameter name="TTS enumMarks" inherits_from_parent="0" content_type="5" value=", / or " default_value=", / or " tooltip="" id="27" />
                                  <Parameter name="TTS helpEnumChoices" inherits_from_parent="0" content_type="5" value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" default_value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" tooltip="" id="28" />
                                  <Parameter name="TTS helpEnumDefault" inherits_from_parent="0" content_type="5" value=" you can ask me: %s. " default_value=" you can ask me: %s. " tooltip="" id="29" />
                                  <Parameter name="TTS helpTactile" inherits_from_parent="0" content_type="5" value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." default_value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." tooltip="" id="30" />
                                  <Parameter name="TTS notUnderstood" inherits_from_parent="0" content_type="5" value="I did not understand. " default_value="I did not understand. " tooltip="" id="31" />
                                  <Parameter name="TTS noQuestion" inherits_from_parent="0" content_type="5" value="No question has been defined, so I cannot repeat it. " default_value="No question has been defined, so I cannot repeat it. " tooltip="" id="32" />
                                  <Parameter name="TTS notUnderstoodAnims" inherits_from_parent="0" content_type="5" value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " default_value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " tooltip="" id="33" />
                                </Box>
                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.sentences = {
			"Chinese" : " 你喜欢吃巧克力吗？ ",
			"English" : " Would you like to go first or second? ",
			"French" : " Aimes-tu le chocolat ? ",
			"German" : " Mögen Sie Schokolade? ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Arabic" : " هل تحب الشوكولاته؟ ",
			"Polish" : " Lubisz czekoladę? ",
			"Czech" : " Máš rád čokoládu? ",
			"Dutch" : " Hou je van chocolade? ",
			"Danish" : " Kan du lide chokolade? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"Swedish" : " Gillar du choklad? ",
			"Russian" : " Вы любите шоколад? ",
			"Turkish" : " Çikolata sever misin? ",
			"MandarinTaiwan" : " 你喜歡吃巧克力嗎？ ",
		}

	def onLoad(self):
		self.tts = self.session().service("ALTextToSpeech")

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese">
                                      <![CDATA[你喜欢吃巧克力吗？]]>
                                    </chinese>
                                    <english uiName="‎American English (American English)" languageName="English">
                                      <![CDATA[Would you like to go first or second?]]>
                                    </english>
                                    <french uiName="‎Français (French)" languageName="French">
                                      <![CDATA[Aimes-tu le chocolat ?]]>
                                    </french>
                                    <german uiName="‎Deutsch (German)" languageName="German">
                                      <![CDATA[Mögen Sie Schokolade?]]>
                                    </german>
                                    <italian uiName="‎Italiano (Italian)" languageName="Italian">
                                      <![CDATA[Ti piace il cioccolato?]]>
                                    </italian>
                                    <japanese uiName="‎日本語 (Japanese)" languageName="Japanese">
                                      <![CDATA[チョコレートが好きですか]]>
                                    </japanese>
                                    <korean uiName="‎한국어 (Korean)" languageName="Korean">
                                      <![CDATA[당신은 초콜렛을 좋아합니까?]]>
                                    </korean>
                                    <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese">
                                      <![CDATA[Gostas de chocolate?]]>
                                    </portuguese>
                                    <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian">
                                      <![CDATA[Você gosta de chocolate?]]>
                                    </brazilian>
                                    <spanish uiName="‎Español (Spanish)" languageName="Spanish">
                                      <![CDATA[¿Te gusta el chocolate?]]>
                                    </spanish>
                                    <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic">
                                      <![CDATA[هل تحب الشوكولاته؟]]>
                                    </arabic>
                                    <polish uiName="‎Język polski (Polish)" languageName="Polish">
                                      <![CDATA[Lubisz czekoladę?]]>
                                    </polish>
                                    <czech uiName="‎Český Jazyk (Czech)" languageName="Czech">
                                      <![CDATA[Máš rád čokoládu?]]>
                                    </czech>
                                    <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch">
                                      <![CDATA[Hou je van chocolade?]]>
                                    </dutch>
                                    <danish uiName="‎Dansk (Danish)" languageName="Danish">
                                      <![CDATA[Kan du lide chokolade?]]>
                                    </danish>
                                    <finnish uiName="‎Suomi (Finnish)" languageName="Finnish">
                                      <![CDATA[Pidätkö suklaasta?]]>
                                    </finnish>
                                    <swedish uiName="‎Svenska (Swedish)" languageName="Swedish">
                                      <![CDATA[Gillar du choklad?]]>
                                    </swedish>
                                    <russian uiName="‎Русский (Russian)" languageName="Russian">
                                      <![CDATA[Вы любите шоколад?]]>
                                    </russian>
                                    <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish">
                                      <![CDATA[Çikolata sever misin?]]>
                                    </turkish>
                                    <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan">
                                      <![CDATA[你喜歡吃巧克力嗎？]]>
                                    </mandarintaiwan>
                                    <language>english</language>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="7" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Box name="Set Language" id="11" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" plugin="setlanguage_plugin" x="64" y="17">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.setTTS = True
        self.setASR = True
        self.setDialog = True
        self.language = "English"

    def getService(self, serviceName, humainName):
        service = None
        try:
            service = self.session().service(serviceName)
        except:
            self.logger.warn("%s is not available, language setting cannot be applied to %s." % (serviceName, humainName))
        return service

    def onLoad(self):
        if self.setTTS:
            self.tts = self.getService("ALTextToSpeech", "speech")
        if self.setASR:
            self.asr = self.getService("ALSpeechRecognition", "recognition")
        if self.setDialog:
            self.dialog = self.getService("ALDialog", "dialog")

    def setLanguage(self, service, serviceName):
        try:
            if service is None:
                return False
            service.setLanguage(self.language)
            return True
        except Exception as e:
            self.logger.error("Could not set language %s for %s: %s" % (self.language, serviceName, e))
            return False

    def onInput_onSet(self):
        res = True
        if self.setTTS:
            res = self.setLanguage(self.tts, "ALTextToSpeech") and res
        if self.setASR:
            res = self.setLanguage(self.asr, "ALSpeechRecognition") and res
        if self.setDialog:
            res = self.setLanguage(self.dialog, "ALDialog") and res

        if res:
            self.onReady()
        else:
            self.logger.error("Language %s could not be set for one or more services." % self.language)
            self.onError()]]>
                          </content>
                        </script>
                        <pluginContent>
                          <language>English</language>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" />
                        <Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" />
                        <Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" />
                        <Resource name="Speech" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Set Game" id="1" localization="8" tooltip="" x="332" y="236">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import sys
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Create a proxy to ALMemory
        try:
            self.mem = self.session().service( "ALMemory" )
        except Exception, e:
            self.logger.info("Error when creating ALMemory proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if p == "regular":
            self.mem.insertData("game", "regular")
        elif p == "reverse":
            self.mem.insertData("game", "reverse")
        else:
            self.mem.insertData("game", "wild")
        self.onStopped()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Game Choice" id="5" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. The recognized answer is sent to the answer output.&#x0A;&#x0A;Note that you must open this box to enter the question text and the&#x0A;available answers." x="199" y="231">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                        <Output name="answer" type="3" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Choice" id="1" localization="8" tooltip="The Choice box is based on the dialog engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. Each recognized answer stimulate its&#x0A;corresponding output.&#x0A;Setting the choices in the box table:&#x0A;- Edit a choice by left double-clicking on its line.&#x0A;- Add a choice by right clicking on a line and selecting &apos;Insert a row&apos;.&#x0A;- Delete a choice by right clicking on its line and selecting &apos;Remove a row&apos;.&#x0A;- Write alternative answers for one choice by separating the phrases with &apos;/&apos; in the same line (e.g.: apple pie / pie / apple)." plugin="ui_choice_plugin" x="312" y="51">
                                  <bitmap>media/images/box/interaction/choice.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v9
# @author Desktop Application team
# (c) 2014 Aldebaran Robotics

import os
import tempfile
import shutil
import uuid
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.dialogIsRunning = False
        self.dialogIsLoaded = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.langDict = {
            "Arabic":"arw",
            "Czech":"czc",
            "Danish":"dad",
            "German":"ged",
            "Greek":"grg",
            "English":"enu",
            "Spanish":"spe",
            "Finnish":"fif",
            "French":"frf",
            "Italian":"iti",
            "Japanese":"jpj",
            "Korean":"kok",
            "Dutch":"dun",
            "Norwegian":"nor",
            "Polish":"plp",
            "Brazilian":"ptb",
            "Portuguese":"ptp",
            "Russian":"rur",
            "Swedish":"sws",
            "Turkish":"trt",
            "Chinese":"mnc",
            "MandarinTaiwan":"mnt"
        }
        # end - choices

        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aDialogChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 10
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")

# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # SERVICE INITIALIZATIONS
        self.animSpeech = self.session().service("ALAnimatedSpeech")
        self.tts = self.session().service("ALTextToSpeech")
        self.memory = self.session().service("ALMemory")
        self.motion = self.session().service("ALMotion")

        try:
            self.dcm = self.session().service( "DCM" )
        except:
            self.dcm = None

        try:
            self.dialog = self.session().service("ALDialog")
        except:
            self.dialog = None
            raise RuntimeError("Choice box cannot be launched, as Dialog is not available.")

        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True
        self.generateTopicFile()

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", "", ""], "Brazilian": ["sim", "não", "", ""], "Chinese": ["是", "不是", "", ""], "Czech": ["ano", "ne", "", ""], "Danish": ["ja", "nej", "", ""], "Dutch": ["ja", "nee", "", ""], "English": ["regular", "wild", "reverse", ""], "Finnish": ["kyllä", "ei", "", ""], "French": ["oui", "non", "", ""], "German": ["ja", "nein", "", ""], "Greek": [""], "Italian": ["sì", "no", "", ""], "Japanese": ["はい", "いいえ", "", ""], "Korean": ["예", "아니", "", ""], "MandarinTaiwan": ["是", "不是", "", ""], "Norwegian": [""], "Polish": ["tak", "nie", "", ""], "Portuguese": ["sim", "não", "", ""], "Russian": ["да", "нет", "", ""], "Spanish": ["si", "no", "", ""], "Swedish": ["ja", "ingen", "", ""], "Turkish": ["evet", "hayır", "", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        language = self.tts.getLanguage()
        try:
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.getLocalizedStringList("TTS confirmation")
            self.getLocalizedStringList("TTS enumMarks")
            self.getLocalizedStringList("TTS helpEnumChoices")
            self.getLocalizedStringList("TTS helpEnumDefault")
            self.getLocalizedStringList("TTS helpTactile")
            self.getLocalizedStringList("TTS notUnderstood")
            self.getLocalizedStringList("TTS noQuestion")
            self.getLocalizedStringList("TTS notUnderstoodAnims")
        except Exception as e:
            raise Exception( "The current language is not supported by this Choice box. Internal sentences are missing for this language. (%s)" % e)
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.guid = ""
        self.lastHeadPos = None
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 10 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateBrainLight =  True
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.bodyLanguageMode = self.tryGetParameter( "Body language mode", "contextual" )
        self.dialog.setASRConfidenceThreshold(self.rUnderstoodThreshold )
        self.animSpeech.setBodyLanguageModeFromStr(self.bodyLanguageMode)
        self.aDefaultChoices = []
        self.aDialogDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.asHelpWords = self.removeUnauthorizedCharacters(self.asHelpWords)
            self.aDefaultChoices.append( self.asHelpWords )
            self.aDialogDefaultChoices += self.asHelpWords
        if (self.bActivateDefaultChoiceRepeat):
            self.asRepeatWords = self.removeUnauthorizedCharacters(self.asRepeatWords)
            self.aDefaultChoices.append( self.asRepeatWords )
            self.aDialogDefaultChoices += self.asRepeatWords
        if (self.bActivateDefaultChoiceExit):
            self.asExitWords = self.removeUnauthorizedCharacters(self.asExitWords)
            self.aDefaultChoices.append( self.asExitWords )
            self.aDialogDefaultChoices += self.asExitWords
        if( question == None ):
            question = ""
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        self.initQuestionAndChoices( question )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        if( not self.bGoOut ):
            self.questionRecognitionReaction()

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = self.tts.getLanguage()
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            self.aDialogDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
                self.aDialogDefaultChoices += self.asHelpWords
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
                self.aDialogDefaultChoices += self.asRepeatWords
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
                self.aDialogDefaultChoices += self.asExitWords
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aDialogChoices += choice
                    self.aChoiceIndexes.append( index )
                index += 1
            self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.animSpeech.stop(idtts)
            except:
                try:
                    self.tts.stop(idtts)
                except:
                    self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def removeIdTTS(self):
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

    def getLocalizedStringList(self, parameterName):
        return self.getParameter(parameterName).split("/")

    def removeUnauthorizedCharacters(self, wordList):
        wordList = [x.replace("'","") for x in wordList]
        return wordList

    def getLanguage(self):
        try:
            language = self.langDict[self.tts.getLanguage()]
        except:
            raise RuntimeError("Language " + self.tts.getLanguage() + " is not available for Choice box!")
        return language

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        language = self.getLanguage()
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aDialogChoices += aChoice
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )
        self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)
        self.sQuestion = [self.sQuestion]
# DIALOG ----------------------------------------------------------------------------------------------------

    def startDialog(self, activate = True):
        if self.bIsRunning:
            self.dialogIsRunning = True
            language = self.getLanguage()
            if not self.dialogIsLoaded:
                self.topics = []
                try:
                    for top in self.allTopicPaths:
                        topic = self.dialog._addDialogFromTopicBox(top, self.behaviorAbsolutePath())
                        self.topics.append(topic)
                        self.dialogIsLoaded = True
                except Exception as e:
                    print "Could not load topic " + str(e)
            if activate:
                try:
                    for top in self.topics:
                        if language in top.split("_")[-1]:
                            self.topic = top
                            self.guid = self.topic.split("_")[2]
                    self.dialog.setConcept("choices" + self.guid, language, self.aDialogChoices)
                    self.dialog.setConcept("question" + self.guid, language, self.sQuestion)
                    self.dialog.activateTopic(self.topic)
                    self.dialog.subscribe(self.getName())
                    thread.start_new_thread( self.loopLedsBrainTwinkle, () )
                except Exception as e:
                    print "Could not activate topic " + str(e)
                try:
                    self.memory.subscribeToEvent("Dialog/LastInput", self.getName(),"onDialogLastInput")
                    self.memory.subscribeToEvent("Dialog/NotSpeaking", self.getName(),"onDialogNotSpeaking")
                    self.memory.subscribeToEvent("Dialog/NotUnderstood", self.getName(),"onDialogNotUnderstood")
                except Exception as e:
                    print "Could not subscribe to event " + str(e)

    def stopDialog(self, unload=True):
        try:
            if unload:
                self.dialog.deactivateTopic(self.topic)
                for top in self.topics:
                    self.dialog.unloadTopic(top)
                self.dialogIsLoaded = False
            else:
                self.dialogIsRunning = False
            self.dialog.unsubscribe(self.getName())
        except Exception as e:
            print "Could not deactivate/unload topic " + str(e)
        try:
            self.memory.unsubscribeToEvent("Dialog/LastInput", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotSpeaking", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotUnderstood", self.getName())
        except Exception as e:
            print "Could not unsubscribe from Event " + str(e)

# DIALOG GENERATING --------------------------------------------------------------------------------------

    def generateTopicFile(self):
        self.directory = tempfile.mkdtemp()
        try:
            os.stat(self.directory)
        except:
            os.mkdir(self.directory)
        self.allTopicPaths = []
        for lang,dLang in self.langDict.iteritems():
            guid = str(uuid.uuid4())
            topicName = "dlg_choice_%s_%s.top" % (guid, dLang)
            topicPath = os.path.join(self.directory, topicName)
            self.allTopicPaths.append(topicPath)
            dialog = self.generateTopicContent(guid, dLang)
            with open(topicPath, 'w') as topic:
                topic.write(dialog)

    def generateTopicContent(self, guid, language):
        dialog = """topic: ~dlg_choice_%s_%s () \nlanguage: %s \ndynamic: question%s\ndynamic: choices%s\nu:(in:onActivation)  ~question%s \n\tu1:(~choices%s) $test=0 """ % (guid, language, language, guid, guid, guid, guid)
        return dialog

    def removeTopicFileDir(self):
        shutil.rmtree(self.directory)

# DIALOG OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onDialogLastInput(self, pDataName, pValue, pMessage):
        try:
            confidence = self.memory.getData("Dialog/Confidence")
        except:
            confidence = 0
        if pValue != "" and pValue in self.aDialogChoices:
            if confidence >= self.rConfirmationThreshold:
                self.sPreviousAnswer = pValue
                self.reactionWordUnderstood(pValue)
            else:
                self.stopDialog()
                self.sPreviousAnswer = pValue
                self.askConfirmation()
        else:
            if not self.bGoOut:
                if self.dialogIsRunning:
                    self.stopDialog(False)
                self.reactionNothingUnderstood()

    def onDialogNotSpeaking(self, pDataName, pValue, pMessage):
        if int(pValue) >= self.nTimeoutReco:
            if self.dialogIsRunning:
                self.stopDialog(False)
            self.sRecoInterruption = "timeout"

    def onDialogNotUnderstood(self, pDataName, pValue, pMessage):
        if self.dialogIsRunning:
            self.stopDialog(False)
        self.reactionNothingUnderstood()

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        if not self.dialogIsRunning:
            self.startDialog(True)
        self.processRecoInterruption()

    def askConfirmation(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        self.bInConfirmation = True
        sentence = self.getLocalizedStringList("TTS confirmation")[0]
        idTTS = -1
        sentenceToSay = sentence % self.sPreviousAnswer
        if( sentenceToSay != ""):
            idTTS = self.animSpeech.pCall("say", sentenceToSay )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentenceToSay) )
        # prepare speech recognition
        aWordsRecognised = []
        aWordsRecognised.extend( self.asNegativeWords )
        aWordsRecognised.extend( self.asPositiveWords )
        sWordsRecognised = "You can say: "
        if( len( aWordsRecognised ) > 1 ):
            for i in range( len( aWordsRecognised ) - 1 ):
                sWordsRecognised += "'" + aWordsRecognised[i] + "', "
        if( len( aWordsRecognised ) > 0 ):
            sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
        sWordsRecognised += "."
        self.logger.debug( sWordsRecognised )
        self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the animSpeech." )
        self.startDialog()

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.stopDialog()
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    self.startDialog()
                    self.sRecoInterruption = ""
                    self.processRecoInterruption()
        else:
            self.nCountNoReply = 0
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.getLocalizedStringList("TTS noQuestion")[0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.animSpeech.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )
        if not self.dialogIsRunning:
            self.bInTactileSensorMenu = False
            self.startDialog()

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        self.headDefault()
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word
            if( self.sPreviousAnswer in self.asHelpWords ):
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ):
                self.repeatWhenNoQuestion()
                # repeat the question
            else:
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
            self.sPreviousAnswer = ""

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.getLocalizedStringList("TTS notUnderstood")[0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.getLocalizedStringList("TTS notUnderstoodAnims")
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumDefault = self.getLocalizedStringList("TTS helpEnumDefault")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.getLocalizedStringList("TTS helpTactile")
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.animSpeech.pCall("say", sentence + "\\Pau=300\\" )
                self.bInTactileSensorMenu = False
            else:
                idTTS = self.animSpeech.pCall("say", sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question
        if not self.dialogIsRunning:
            self.startDialog()

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.animSpeech.pCall("say", sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.animSpeech.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
            if not self.dialogIsRunning:
                self.startDialog()
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDs ----------------------------------------------------------------------------------------------------

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLedsBrain( 0., 500 )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLedsBrain( 0.5, 500 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# ANIMATIONS ----------------------------------------------------------------------------------------------

    def headDown(self):
        names = []
        times = []
        keys = []
        names.append("HeadPitch")
        times.append([1.24])
        keys.append([[0.392662, [3, -0.413333, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.24])
        keys.append([[-0.027654, [3, -0.413333, 0], [3, 0, 0]]])
        try:
            self.motion.angleInterpolationBezier(names, times, keys)
            self.lastHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        except BaseException, err:
          print err

    def headDefault(self):
        currentHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        if currentHeadPos != self.lastHeadPos:
            return
        names = []
        times = []
        keys = []

        names.append("HeadPitch")
        times.append([1.2])
        keys.append([[-0.194861, [3, -0.4, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.2])
        keys.append([[-0.00771196, [3, -0.4, 0], [3, 0, 0]]])

        try:
            self.motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                self.headDown()
                thread.start_new_thread(self.loopLedsBrainTurn, ())
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) or self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    self.reactionWordUnderstood( self.aChoices[self.nIndexChoice][0] )
                    self.rTimeWhenActionMadeInTactileMenu = -1
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        self.headDown()
        sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
        idTTS = self.tts.pCall("say", sentence )
        self.aIdsTTS.append( idTTS )
        self.logger.debug( "Robot says: " + str(sentence) )
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.animSpeech.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.stopDialog(False)
        self.nCountNoReply = 0
        self.lastTimeoutVal = 0
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bInTactileSensorMenu = False
        self.bIsRunning = False
        self.goOutOfQuestionRecoReaction()

        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        if self.dialogIsRunning:
            self.stopDialog(False)
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.stopDialog()
        language = self.getLanguage()
        #reset concepts to reduce loading time
        try:
            self.dialog.setConcept("choices" + self.guid, language, [])
            self.dialog.setConcept("question" + self.guid, language, [])
        except Exception as e:
            print "Could not empty concept " + str(e)
        try:
            self.removeTopicFileDir()
        except Exception as e:
            print "Could not remove temporary topic file directory " + str(e)
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic" nuanceCode="arw">
                                      <keyword>نعم</keyword>
                                      <keyword>لا</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </arabic>
                                    <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian" nuanceCode="ptb">
                                      <keyword>sim</keyword>
                                      <keyword>não</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </brazilian>
                                    <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese" nuanceCode="mnc">
                                      <keyword>是</keyword>
                                      <keyword>不是</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </chinese>
                                    <czech uiName="‎Český Jazyk (Czech)" languageName="Czech" nuanceCode="czc">
                                      <keyword>ano</keyword>
                                      <keyword>ne</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </czech>
                                    <danish uiName="‎Dansk (Danish)" languageName="Danish" nuanceCode="dad">
                                      <keyword>ja</keyword>
                                      <keyword>nej</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </danish>
                                    <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch" nuanceCode="dun">
                                      <keyword>ja</keyword>
                                      <keyword>nee</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </dutch>
                                    <english uiName="‎American English (American English)" languageName="English" nuanceCode="enu">
                                      <keyword>regular</keyword>
                                      <keyword>wild</keyword>
                                      <keyword>reverse</keyword>
                                      <keyword></keyword>
                                    </english>
                                    <finnish uiName="‎Suomi (Finnish)" languageName="Finnish" nuanceCode="fif">
                                      <keyword>kyllä</keyword>
                                      <keyword>ei</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </finnish>
                                    <french uiName="‎Français (French)" languageName="French" nuanceCode="frf">
                                      <keyword>oui</keyword>
                                      <keyword>non</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </french>
                                    <german uiName="‎Deutsch (German)" languageName="German" nuanceCode="ged">
                                      <keyword>ja</keyword>
                                      <keyword>nein</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </german>
                                    <greek uiName="‎Ελληνικά (Greek)" languageName="Greek" nuanceCode="grg">
                                      <keyword></keyword>
                                    </greek>
                                    <italian uiName="‎Italiano (Italian)" languageName="Italian" nuanceCode="iti">
                                      <keyword>sì</keyword>
                                      <keyword>no</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </italian>
                                    <japanese uiName="‎日本語 (Japanese)" languageName="Japanese" nuanceCode="jpj">
                                      <keyword>はい</keyword>
                                      <keyword>いいえ</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </japanese>
                                    <korean uiName="‎한국어 (Korean)" languageName="Korean" nuanceCode="kok">
                                      <keyword>예</keyword>
                                      <keyword>아니</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </korean>
                                    <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan" nuanceCode="mnt">
                                      <keyword>是</keyword>
                                      <keyword>不是</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </mandarintaiwan>
                                    <norwegian uiName="‎Norsk (Norwegian)" languageName="Norwegian" nuanceCode="nor">
                                      <keyword></keyword>
                                    </norwegian>
                                    <polish uiName="‎Język polski (Polish)" languageName="Polish" nuanceCode="plp">
                                      <keyword>tak</keyword>
                                      <keyword>nie</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </polish>
                                    <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese" nuanceCode="ptp">
                                      <keyword>sim</keyword>
                                      <keyword>não</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </portuguese>
                                    <russian uiName="‎Русский (Russian)" languageName="Russian" nuanceCode="rur">
                                      <keyword>да</keyword>
                                      <keyword>нет</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </russian>
                                    <spanish uiName="‎Español (Spanish)" languageName="Spanish" nuanceCode="spe">
                                      <keyword>si</keyword>
                                      <keyword>no</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </spanish>
                                    <swedish uiName="‎Svenska (Swedish)" languageName="Swedish" nuanceCode="sws">
                                      <keyword>ja</keyword>
                                      <keyword>ingen</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </swedish>
                                    <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish" nuanceCode="trt">
                                      <keyword>evet</keyword>
                                      <keyword>hayır</keyword>
                                      <keyword></keyword>
                                      <keyword></keyword>
                                    </turkish>
                                    <language>english</language>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                  <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip='To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;eg [[&quot;yes&quot;,&quot;ok&quot;],&quot;no&quot;,&quot;maybe&quot;]&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected.' id="3" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                  <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                  <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                  <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                  <Output name="output_3" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="8" />
                                  <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="9" />
                                  <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="10" />
                                  <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="11" />
                                  <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="12" />
                                  <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="13" />
                                  <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="14" />
                                  <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="6" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="15" />
                                  <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="16" />
                                  <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="17" />
                                  <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="18" />
                                  <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="19" />
                                  <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="20" />
                                  <Parameter name="Body language mode" inherits_from_parent="0" content_type="3" value="disabled" default_value="contextual" custom_choice="0" tooltip="" id="21">
                                    <Choice value="contextual" />
                                    <Choice value="random" />
                                    <Choice value="disabled" />
                                  </Parameter>
                                  <Parameter name="SpeechReco negative" inherits_from_parent="0" content_type="5" value="no/no nao/disagree/I disagree" default_value="no/no nao/disagree/I disagree" tooltip="" id="22" />
                                  <Parameter name="SpeechReco positive" inherits_from_parent="0" content_type="5" value="yes/yes nao/agree/I agree/of course" default_value="yes/yes nao/agree/I agree/of course" tooltip="" id="23" />
                                  <Parameter name="SpeechReco help" inherits_from_parent="0" content_type="5" value="help/help me/i don&apos;t know" default_value="help/help me/i don&apos;t know" tooltip="" id="24" />
                                  <Parameter name="SpeechReco exit" inherits_from_parent="0" content_type="5" value="exit/stop/quit" default_value="exit/stop/quit" tooltip="" id="25" />
                                  <Parameter name="SpeechReco repeat" inherits_from_parent="0" content_type="5" value="repeat/pardon/what/excuse me" default_value="repeat/pardon/what/excuse me" tooltip="" id="26" />
                                  <Parameter name="TTS confirmation" inherits_from_parent="0" content_type="5" value="I understood %s. Is that correct?" default_value="I understood %s. Is that correct?" tooltip="" id="27" />
                                  <Parameter name="TTS enumMarks" inherits_from_parent="0" content_type="5" value=", / or " default_value=", / or " tooltip="" id="28" />
                                  <Parameter name="TTS helpEnumChoices" inherits_from_parent="0" content_type="5" value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" default_value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" tooltip="" id="29" />
                                  <Parameter name="TTS helpEnumDefault" inherits_from_parent="0" content_type="5" value=" you can ask me: %s. " default_value=" you can ask me: %s. " tooltip="" id="30" />
                                  <Parameter name="TTS helpTactile" inherits_from_parent="0" content_type="5" value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." default_value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." tooltip="" id="31" />
                                  <Parameter name="TTS notUnderstood" inherits_from_parent="0" content_type="5" value="I did not understand. " default_value="I did not understand. " tooltip="" id="32" />
                                  <Parameter name="TTS noQuestion" inherits_from_parent="0" content_type="5" value="No question has been defined, so I cannot repeat it. " default_value="No question has been defined, so I cannot repeat it. " tooltip="" id="33" />
                                  <Parameter name="TTS notUnderstoodAnims" inherits_from_parent="0" content_type="5" value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " default_value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " tooltip="" id="34" />
                                </Box>
                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.sentences = {
			"Chinese" : " 你喜欢吃巧克力吗？ ",
			"English" : " Would you like to play regular, reverse, or wild tic tac toe? ",
			"French" : " Aimes-tu le chocolat ? ",
			"German" : " Mögen Sie Schokolade? ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Arabic" : " هل تحب الشوكولاته؟ ",
			"Polish" : " Lubisz czekoladę? ",
			"Czech" : " Máš rád čokoládu? ",
			"Dutch" : " Hou je van chocolade? ",
			"Danish" : " Kan du lide chokolade? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"Swedish" : " Gillar du choklad? ",
			"Russian" : " Вы любите шоколад? ",
			"Turkish" : " Çikolata sever misin? ",
			"MandarinTaiwan" : " 你喜歡吃巧克力嗎？ ",
		}

	def onLoad(self):
		self.tts = self.session().service("ALTextToSpeech")

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese">
                                      <![CDATA[你喜欢吃巧克力吗？]]>
                                    </chinese>
                                    <english uiName="‎American English (American English)" languageName="English">
                                      <![CDATA[Would you like to play regular, reverse, or wild tic tac toe?]]>
                                    </english>
                                    <french uiName="‎Français (French)" languageName="French">
                                      <![CDATA[Aimes-tu le chocolat ?]]>
                                    </french>
                                    <german uiName="‎Deutsch (German)" languageName="German">
                                      <![CDATA[Mögen Sie Schokolade?]]>
                                    </german>
                                    <italian uiName="‎Italiano (Italian)" languageName="Italian">
                                      <![CDATA[Ti piace il cioccolato?]]>
                                    </italian>
                                    <japanese uiName="‎日本語 (Japanese)" languageName="Japanese">
                                      <![CDATA[チョコレートが好きですか]]>
                                    </japanese>
                                    <korean uiName="‎한국어 (Korean)" languageName="Korean">
                                      <![CDATA[당신은 초콜렛을 좋아합니까?]]>
                                    </korean>
                                    <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese">
                                      <![CDATA[Gostas de chocolate?]]>
                                    </portuguese>
                                    <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian">
                                      <![CDATA[Você gosta de chocolate?]]>
                                    </brazilian>
                                    <spanish uiName="‎Español (Spanish)" languageName="Spanish">
                                      <![CDATA[¿Te gusta el chocolate?]]>
                                    </spanish>
                                    <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic">
                                      <![CDATA[هل تحب الشوكولاته؟]]>
                                    </arabic>
                                    <polish uiName="‎Język polski (Polish)" languageName="Polish">
                                      <![CDATA[Lubisz czekoladę?]]>
                                    </polish>
                                    <czech uiName="‎Český Jazyk (Czech)" languageName="Czech">
                                      <![CDATA[Máš rád čokoládu?]]>
                                    </czech>
                                    <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch">
                                      <![CDATA[Hou je van chocolade?]]>
                                    </dutch>
                                    <danish uiName="‎Dansk (Danish)" languageName="Danish">
                                      <![CDATA[Kan du lide chokolade?]]>
                                    </danish>
                                    <finnish uiName="‎Suomi (Finnish)" languageName="Finnish">
                                      <![CDATA[Pidätkö suklaasta?]]>
                                    </finnish>
                                    <swedish uiName="‎Svenska (Swedish)" languageName="Swedish">
                                      <![CDATA[Gillar du choklad?]]>
                                    </swedish>
                                    <russian uiName="‎Русский (Russian)" languageName="Russian">
                                      <![CDATA[Вы любите шоколад?]]>
                                    </russian>
                                    <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish">
                                      <![CDATA[Çikolata sever misin?]]>
                                    </turkish>
                                    <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan">
                                      <![CDATA[你喜歡吃巧克力嗎？]]>
                                    </mandarintaiwan>
                                    <language>english</language>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                </Box>
                                <Box name="Log" id="2" localization="8" tooltip="Prompt the message in the debug window. You can set a prefix and a priority&#x0A;for the message in the parameters." x="690" y="140">
                                  <bitmap>media/images/box/print.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_message(self, p):
        sPriority = self.getParameter("Priority")
        sMessage = self.getParameter("Message prefix")
        if( sMessage != "" and p != None ):
            sMessage += ": "
        if( p != None ):
            sMessage += str(p)
        if( sPriority == "Fatal" ):
            self.logger.fatal( sMessage )
        elif( sPriority == "Error" ):
            self.logger.error( sMessage )
        elif( sPriority == "Warning" ):
            self.logger.warning( sMessage )
        elif( sPriority == "Info" ):
            self.logger.info( sMessage )
        elif( sPriority == "Debug" ):
            self.logger.debug( sMessage )
        self.onDone()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="message" type="0" type_size="1" nature="1" inner="0" tooltip='The message to print or a &quot;Bang&quot; to only print the message set as parameter.' id="2" />
                                  <Output name="onDone" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when box behavior is finished." id="3" />
                                  <Parameter name="Message prefix" inherits_from_parent="0" content_type="3" value="Message text" default_value="Message text" custom_choice="0" tooltip="Enter the text you want to print before the input message." id="4" />
                                  <Parameter name="Priority" inherits_from_parent="0" content_type="3" value="Info" default_value="Info" custom_choice="0" tooltip="Enter the priority of your message. If you select error, the box will get red when it will be stimulated." id="5">
                                    <Choice value="Fatal" />
                                    <Choice value="Error" />
                                    <Choice value="Warning" />
                                    <Choice value="Info" />
                                    <Choice value="Debug" />
                                  </Parameter>
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="7" />
                                <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="3" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="8" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="4" />
                      <Link inputowner="9" indexofinput="2" outputowner="7" indexofoutput="3" />
                      <Link inputowner="2" indexofinput="2" outputowner="10" indexofoutput="5" />
                      <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" />
                      <Link inputowner="8" indexofinput="2" outputowner="3" indexofoutput="5" />
                      <Link inputowner="11" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="7" indexofinput="2" outputowner="11" indexofoutput="3" />
                      <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="5" />
                      <Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="4" />
                      <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Get Game State" id="3" localization="8" tooltip="Take a picture of the board and convert it to a tic tac toe board the robot can understand." x="509" y="11">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Take Picture" id="1" localization="8" tooltip='Robot will take a picture of what it is currently looking at and save it to &quot;/home/nao/recordings/cameras/image.jpg&quot;.' x="339" y="44">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import os
import sys
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # Create a proxy to ALPhotoCapture
        try:
            photoCaptureProxy = self.session().service( "ALPhotoCapture" )
        except Exception, e:
            self.logger.info("Error when creating ALPhotoCapture proxy:")
            self.logger.info(str(e))
            exit(1)
        photoCaptureProxy.setResolution(3)
        photoCaptureProxy.setPictureFormat("jpg")
        photoCaptureProxy.takePicture("/home/nao/recordings/cameras/", "image", True)
        self.onStopped()


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Calculate Game State" id="2" localization="8" tooltip='Access image at &quot;/home/nao/recordings/cameras/image.jpg&quot; and turn it into a 2D array containing the current game state (board). This array is passed into the output.' x="707" y="47">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import numpy as np
import cv2

class MyClass(GeneratedClass):
    logcount = 0
    def logAThing(self, s):
        self.logger.info(str(self.logcount)+": "+str(s))
        self.logcount+=1

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        # Helper function to get width of bounding rect of a contour

        def getWidth(val):
            return cv2.boundingRect(val)[2]

        # Helper function to get height of bounding rect of a contour

        def getHeight(val):
            return cv2.boundingRect(val)[3]

        # Given a list of contours sorted by width, find the median width

        def getMedianWidth(conts):
            length = len(conts)
            if length % 2 == 1:
                return cv2.boundingRect(conts[length//2])[2]
            else:
                return ((cv2.boundingRect(conts[length//2])[2] + cv2.boundingRect(conts[length//2 - 1])[2]) / 2)

        # Given a list of contours sorted by height, find the median height

        def getMedianHeight(conts):
            length = len(conts)
            if length % 2 == 1:
                return cv2.boundingRect(conts[length//2])[3]
            else:
                return ((cv2.boundingRect(conts[length//2])[3] + cv2.boundingRect(conts[length//2 - 1])[3]) / 2)

        # create a 2d array to hold the gamestate
        gamestate = [["-", "-", "-"], ["-", "-", "-"], ["-", "-", "-"]]

        MARGIN = 5
        numBoardTiles = 9

        # kernel used for noise removal
        kernel = np.ones((7, 7), np.uint8)
        # Load a color image
        IM_DIR = '/home/nao/recordings/cameras/'
        IM_NAME = 'image.jpg'
        img = cv2.resize(cv2.imread(IM_DIR + IM_NAME),
            (1280, 960), interpolation=cv2.INTER_AREA)

        # turn into grayscale
        img_g = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        # turn into thresholded binary
        _, thresh1 = cv2.threshold(img_g, 127, 255, cv2.THRESH_BINARY)
        # remove noise from binary
        thresh1 = cv2.morphologyEx(thresh1, cv2.MORPH_OPEN, kernel)

        cv2.imwrite(IM_DIR + "binary.jpg", thresh1)


        # find and draw contours.
        # RETR_EXTERNAL retrieves only the extreme outer contours
        # RETR_LIST retrieves all contours
        _, contours, hierarchy = cv2.findContours(
            thresh1, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)

        # find largest contour (outline of whole picture) and second largest contour (border of the actual game)
        largestArea = 0
        secondLargestArea = -1
        largestContour = 0
        secondLargestContour = 0
        i = 0
        for ct in contours:
            self.logAThing(cv2.boundingRect(ct))
            area = cv2.contourArea(ct)
            # self.logAThing("Second largest contour", secondLargestContour)
            if area > secondLargestArea:
                if area > largestArea:
                    secondLargestArea = largestArea
                    secondLargestContour = largestContour
                    largestArea = cv2.contourArea(ct)
                    largestContour = i
                else:
                    secondLargestArea = cv2.contourArea(ct)
                    secondLargestContour = i
            i = i + 1

        self.logAThing("Largest contour index " + str(cv2.boundingRect(contours[largestContour])))
        self.logAThing("Second largest contour index " +
            str(cv2.boundingRect(contours[secondLargestContour])))

        # Crop image to inside of second largest contour
        x1, y1, w1, h1 = cv2.boundingRect(contours[secondLargestContour])
        bwCropped = thresh1[y1+MARGIN:y1+h1-MARGIN, x1+MARGIN:x1+w1-MARGIN]
        colorCroppped = img[y1+MARGIN:y1+h1-MARGIN, x1+MARGIN:x1+w1-MARGIN]

        # Find contours in cropped image
        _, contours, hierarchy = cv2.findContours(
            bwCropped, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        # Clean out extra contours
        while len(contours) > numBoardTiles:
            # Find the furthest width from the median and the bounding rect of that width
            contours.sort(key=getWidth)
            medianWidth = getMedianWidth(contours)
            furthestFromMedianWidth = 0
            furthestFromMedianWidthBoundingRect = 0
            for ct in contours:
                tempWidth = abs(medianWidth - getWidth(ct))
                if tempWidth > furthestFromMedianWidth:
                    furthestFromMedianWidth = tempWidth
                    furthestFromMedianWidthBoundingRect = cv2.boundingRect(ct)
            # Find the furthest height from the median and the bounding rect of that height
            contours.sort(key=getHeight)
            medianHeight = getMedianHeight(contours)
            furthestFromMedianHeight = 0
            furthestFromMedianHeightBoundingRect = 0
            for ct in contours:
                tempHeight = abs(medianHeight - getHeight(ct))
                if tempHeight > furthestFromMedianHeight:
                    furthestFromMedianHeight = tempHeight
                    furthestFromMedianHeightBoundingRect = cv2.boundingRect(ct)
            # Take the larger difference between the width and height and delete the associated contour
            boundingRectToDelete = 0
            if furthestFromMedianWidth > furthestFromMedianHeight:
                boundingRectToDelete = furthestFromMedianWidthBoundingRect
            else:
                boundingRectToDelete = furthestFromMedianHeightBoundingRect
            i = 0
            for ct in contours:
                if cv2.boundingRect(ct) == boundingRectToDelete:
                    self.logAThing("Deleting" + str(cv2.boundingRect(ct)))
                    contours.pop(i)
                    self.logAThing("New length" + str(len(contours)))
                else:
                    i = i + 1

        for ct in contours:
            self.logAThing(str(cv2.boundingRect(ct)))

        x = 1
        y = 2
        for ct in contours:
            cv2.drawContours(colorCroppped, [ct], -1, (255, 0+x/1280*255, 0+y/960*255), 15)
            x = x + 1
            y = y + 1

        cv2.imwrite(IM_DIR + "outers.jpg", img)

        # ======================================================
        # ======================================================
        # FIND INNER CONTOURS IN EACH TILE
        # ======================================================
        # ======================================================


        # get the image width and height
        img_width = colorCroppped.shape[1]
        img_height = colorCroppped.shape[0]
        # make a copy of the original image to draw the inner contours
        imgCopy = cv2.resize(cv2.imread(IM_DIR + IM_NAME),
            (1280, 960), interpolation=cv2.INTER_AREA)
        imgCopyCropped = imgCopy[y1+MARGIN:y1+h1-MARGIN, x1+MARGIN:x1+w1-MARGIN]

        tileCount = 0
        self.logAThing("finding contours in tiles")
        for cnt in contours:
            tileCount = tileCount+1
            # use boundingrect to get coordinates of tile
            x,y,w,h = cv2.boundingRect(cnt)
            tileArea = cv2.contourArea(cnt)
            # create new image from binary, for further analysis. Trim off the edge that has a line
            tile = bwCropped[y+MARGIN:y+h-MARGIN,x+MARGIN:x+w-MARGIN]
            # create new image from the image copy, so we can draw the inner contours easily
            imgCopyTile = imgCopyCropped[y+MARGIN:y+h-MARGIN,x+MARGIN:x+w-MARGIN]

            #determine the array indexes of the tile
            tileX = int(round(((x*3.0)/img_width)))
            tileY = int(round(((y*3.0)/img_height)))
            self.logAThing(str(img_width)+" "+str(img_height)+" "+str(x)+"  "+str(y)+" "+str(tileX)+"  "+str(tileY))


            if tileX >= 0 and tileX < 3 and tileY >= 0 and tileY < 3:
                # find contours in the tile image. RETR_TREE retrieves all of the contours and reconstructs a full hierarchy of nested contours.
                _, c, hierarchy = cv2.findContours(tile, cv2.RETR_TREE , cv2.CHAIN_APPROX_SIMPLE)
                for ct in c:
                    # to prevent the tile finding itself as contour, and to ignore tiny contours
                    x2, y2, w2, h2 = cv2.boundingRect(ct)
                    if cv2.contourArea(ct) < tileArea * 0.70 and w2 > 0.2 * w and h2 > 0.2 * h:
                        number_of_white_pix = np.sum(tile[y2+MARGIN:y2+h2-MARGIN,x2+MARGIN:x2+w2-MARGIN] == 255)
                        number_of_black_pix = np.sum(tile[y2+MARGIN:y2+h2-MARGIN,x2+MARGIN:x2+w2-MARGIN] == 0)
                        self.logAThing(str(tileX) + str(tileY))
                        self.logAThing('Number of white pixels:' + str(number_of_white_pix))
                        self.logAThing('Number of black pixels:' + str(number_of_black_pix))
                        # the area needs to be at least 5% black in order to be legit
                        if (20*number_of_black_pix > number_of_white_pix):
                            cv2.drawContours(imgCopyTile, [ct], -1, (255,0+tileX*127,0+tileY*127), 15)
                            #calculate the solitity
                            area = cv2.contourArea(ct)
                            hull = cv2.convexHull(ct)
                            hull_area = cv2.contourArea(hull)
                            if(hull_area != 0):
                                solidity = float(area)/hull_area
                            else:
                                solidity = 1

                            self.logAThing('Solidity' + str(solidity))

                            # fill the gamestate with the right sign
                            if(solidity > 0.5):
                                gamestate[tileY][tileX] = "O"
                            else:
                                gamestate[tileY][tileX] = "X"
            else:
                self.logAThing("tile out of bounds: " + str(tileX) + " " + str(tileY))
        #self.logAThing the gamestate
        self.logAThing("Gamestate:")
        for line in gamestate:
            linetxt = ""
            for cel in line:
                linetxt = linetxt + "|" + cel
            self.logAThing(linetxt)

        cv2.imwrite(IM_DIR + "inners.jpg", imgCopy)
        self.onStopped(gamestate) #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Turn" id="1" localization="8" tooltip="Determine who&apos;s turn is next, and perform that player&apos;s turn" x="343" y="14">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Next Turn" id="4" localization="8" tooltip="Pass control to Human Turn or Robot Turn based on the player turn variable." x="255" y="68">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import os
import sys
import time
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        try:
            self.mem = self.session().service( "ALMemory" )
        except Exception, e:
            self.logger.info("Error when creating ALMemory proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("new turn")
        if self.mem.getData("turn") == "human":
            self.logger.info("human turn")
            self.onHumanTurn()
        else:
            self.logger.info("robot turn")
            self.onRobotTurn()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onHumanTurn" type="1" type_size="1" nature="1" inner="0" tooltip="It is the human&apos;s turn" id="4" />
                        <Output name="onRobotTurn" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                      </Box>
                      <Box name="Human Turn" id="5" localization="8" tooltip="Human player is prompted to draw their move on the board and tap the robot&apos;s head when they are done." x="533" y="13">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    IP = "10.50.30.157"
    PORT = 9559
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Create a proxy to ALTextToSpeech
        try:
            self.tts = self.session().service( "ALTextToSpeech" )
        except Exception, e:
            self.logger.info("Error when creating ALTextToSpeech proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.tts.say("Your turn. Tap my head when you are done.")
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Robot Turn" id="6" localization="8" tooltip="Robot will use AI to calculate the move it wants to make, tell the human to draw that move, and await a tap on the head to indicate the move has been drawn.&#x0A;Robot saves its desired move with ALMemory." x="428" y="251">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import sys
import enum
from naoqi import ALProxy
import numpy as np
import copy
import random

class PType(enum.Enum):
   P1 = 1
   P2 = 2

class Modifiers(enum.Enum):
   Wild = 1
   Reverse = 2

def yWord(y):
    if y == 0:
        return "top"
    elif y == 1:
        return "middle"
    elif y == 2:
        return "bottom"

def xWord(x):
    if x == 0:
        return "left"
    elif x == 1:
        return "middle"
    elif x == 2:
        return "right"


# Checks whether the player has three
# of their marks in a horizontal row
def row_win(board, player):
    length = len(board)
    for x in range(length):
        win = True

        for y in range(length):
            if board[x][y] != player:
                win = False
                continue

        if win == True:
            return(win)
    return(win)

# Checks whether the player has three
# of their marks in a vertical row
def col_win(board, player):
    length = len(board)
    for x in range(length):
        win = True

        for y in range(length):
            if board[y][x] != player:
                win = False
                continue

        if win == True:
            return(win)
    return(win)

# Checks whether the player has three
# of their marks in a diagonal row
def diag_win(board, player):
    win = True
    y = 0
    length = len(board)
    for x in range(length):
        if board[x][x] != player:
            win = False
    if win:
        return win
    win = True
    if win:
        for x in range(length):
            y = length - 1 - x
            if board[x][y] != player:
                win = False
    return win

# Evaluates whether there is
# a winner or a tie
# player is the one who made the most recent move
# None = tie, -1 = unfinished, PType.P1 = P1 wins, PType.P2 = P2 wins
def evaluate(modifiers, board, player):
    winner = None
    length = len(board)

    for symbol in ["X", "O"]:
        if (row_win(board, symbol) or
            col_win(board,symbol) or
            diag_win(board,symbol)):

            winner = player

    if winner == None:
        for x in range(length):
            if winner == -1:
                break
            for y in range(length):
                if board[x][y] == "-":
                    winner = -1
                    break

    if Modifiers.Reverse in modifiers and winner != None and winner != -1:
        return PType.P1 if winner == PType.P2 else PType.P2
    else:
        return winner

# Check for empty places on board
def possibilities(board):
    l = []
    length = len(board)

    for i in range(length):
        for j in range(length):

            if board[i][j] == "-":
                l.append((i, j))
    return(l)

# Score a result based on the modifiers provided
def branch(modifiers, board, player, symbol, playedCoord, playedSymbol):
    # evaulate the result assuming the previous player made the last move
    result = evaluate(modifiers, board, PType.P1 if player == PType.P2 else PType.P2)

    if result == -1:
        #continue branching
        nextPlayer = None
        if player == PType.P1:
            nextPlayer = PType.P2
        else:
            nextPlayer = PType.P1

        nextSymbol = None
        if symbol == "X":
            nextSymbol = "O"
        else:
            nextSymbol = "X"

        positions = possibilities(board)
        nextBoard = None
        bestOptions = []
        largest = None
        winFound = False
        for pos in list(positions):
            nextBoard = copy.deepcopy(board)
            # search both X and O placements if we're playing wild
            if Modifiers.Wild in modifiers:
                for sym in ["X", "O"]:
                    nextBoard[pos[0]][pos[1]] = sym
                    evaluation = evaluate(modifiers, nextBoard, player)
                    score = scoreResult(evaluation, player)
                    if score == 1:
                        winFound = True
                        bestOptions.append((player, pos, sym))
            # otherwise just use the next symbol
            else:
                nextBoard[pos[0]][pos[1]] = symbol
                evaluation = evaluate(modifiers, nextBoard, player)
                score = scoreResult(evaluation, player)
                if score == 1:
                    winFound = True
                    bestOptions.append((player, pos, symbol))
        if winFound == False:
            for pos in positions:
                nextBoard = copy.deepcopy(board)
                # search both X and O placements if we're playing wild
                if Modifiers.Wild in modifiers:
                    for sym in ["X", "O"]:
                        nextBoard[pos[0]][pos[1]] = sym
                        nextResult, _, _ = branch(modifiers, nextBoard, nextPlayer, nextSymbol, pos, sym)
                        score = scoreResult(nextResult, player)
                        # choose the best branch to return
                        if largest == None or largest < score:
                            largest = score
                            bestOptions = [(nextResult, pos, sym)]
                        elif largest == score:
                            bestOptions.append((nextResult, pos, sym))
                # otherwise just use the next symbol
                else:
                    nextBoard[pos[0]][pos[1]] = symbol
                    nextResult, _, _ = branch(modifiers, nextBoard, nextPlayer, nextSymbol, pos, symbol)
                    score = scoreResult(nextResult, player)
                    # choose the best branch to return
                    if largest == None or largest < score:
                        largest = score
                        bestOptions = [(nextResult, pos, symbol)]
                    elif largest == score:
                        bestOptions.append((nextResult, pos, symbol))

        idx = random.randint(0,len(bestOptions)-1)
        bestResult = bestOptions[idx][0]
        bestCoord = bestOptions[idx][1]
        bestSymbol = bestOptions[idx][2]

        return bestResult, bestCoord, bestSymbol
    else:
        return result, playedCoord, playedSymbol

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        try:
            self.mem = self.session().service( "ALMemory" )
        except Exception, e:
            self.logger.info("Error when creating ALMemory proxy:")
            self.logger.info(str(e))
            exit(1)
        # Create a proxy to ALTextToSpeech
        try:
            self.tts = self.session().service( "ALTextToSpeech" )
        except Exception, e:
            self.logger.info("Error when creating ALTextToSpeech proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        board = self.mem.getData("board")
        symbol = "O" if self.mem.getData("marker") == "X" else "X"
        modifier = self.mem.getData("game")
        if modifier == "wild":
            modifiers = [Modifiers.Wild]
        elif modifier == "reverse":
            modifiers = [Modifiers.Reverse]
        else:
            modifiers = []
        result, playedCoord, playedSymbol = branch([], board, PType.P1, symbol, None, None)
        self.mem.insertData("robotCoords", playedCoord)
        self.mem.insertData("playedSymbol", playedSymbol)
        self.logger.info(result)
        self.tts.say(yWord(playedCoord[0]) + ", " + xWord(playedCoord[1]) + ". Tap my head when you have written my move.")

        self.onStopped(playedCoord)
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Tactile Head" id="1" localization="8" tooltip="Detect touch on head tactile sensor." x="535" y="119">
                        <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                        <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                        <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                        <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                        <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="Head-sequence" type="Lock" timeout="0" />
                      </Box>
                      <Box name="Wait For Signals" id="2" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="741" y="113">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                        <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                        <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                      </Box>
                      <Box name="Play Animation" id="3" localization="8" tooltip="" x="605" y="236">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Select Animation" id="1" localization="8" tooltip="" x="128" y="316">
                                  <bitmap>media/images/box/box-python-script.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        y = p[0]
        x = p[1]
        if(y == 0 and x == 0):
            self.topLeft()
        elif (y == 0 and x == 1):
            self.topMiddle()
        elif (y == 0 and x == 2):
            self.topRight()
        elif (y == 1 and x == 0):
            self.middleLeft()
        elif (y == 1 and x == 1):
            self.middleMiddle()
        elif (y == 1 and x == 2):
            self.middleRight()
        elif (y == 2 and x == 0):
            self.bottomLeft()
        elif (y == 2 and x == 1):
            self.bottomMiddle()
        elif (y == 2 and x == 2):
            self.bottomRight()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="topLeft" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Output name="topMiddle" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                  <Output name="topRight" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                                  <Output name="middleLeft" type="1" type_size="1" nature="1" inner="0" tooltip="" id="7" />
                                  <Output name="middleMiddle" type="1" type_size="1" nature="1" inner="0" tooltip="" id="8" />
                                  <Output name="middleRight" type="1" type_size="1" nature="1" inner="0" tooltip="" id="9" />
                                  <Output name="bottomLeft" type="1" type_size="1" nature="1" inner="0" tooltip="" id="10" />
                                  <Output name="bottomMiddle" type="1" type_size="1" nature="1" inner="0" tooltip="" id="11" />
                                  <Output name="bottomRight" type="1" type_size="1" nature="1" inner="0" tooltip="" id="12" />
                                </Box>
                                <Box name="Bottom Right" id="6" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="454" y="767">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-7.91266" />
                                        <Key frame="20" value="-8.26423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="1.40867" />
                                        <Key frame="20" value="0.529749" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.18802" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.59429" />
                                        <Key frame="20" value="-6.41851" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-23.2937" />
                                        <Key frame="20" value="-22.6785" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.4984" />
                                        <Key frame="20" value="-66.0043" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.11683" />
                                        <Key frame="20" value="7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.85315" />
                                        <Key frame="20" value="6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.44688" />
                                        <Key frame="20" value="-5.53478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="81.5659" />
                                        <Key frame="20" value="83.8511" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="11.1647" />
                                        <Key frame="20" value="10.0221" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="-3.68905" />
                                        <Key frame="20" value="5.71537" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.00743" />
                                        <Key frame="20" value="5.18321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.32579" />
                                        <Key frame="20" value="6.4137" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="23.0252" />
                                        <Key frame="20" value="8.96255" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.5033" />
                                        <Key frame="20" value="23.5574" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.20952" />
                                        <Key frame="20" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.68218" />
                                        <Key frame="20" value="-6.85796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.53958" />
                                        <Key frame="20" value="-5.45169" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.7252" />
                                        <Key frame="20" value="55.5452" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-10.8083" />
                                        <Key frame="20" value="-39.0215" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="-7.3805" />
                                        <Key frame="20" value="6.06693" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Bottom Middle" id="7" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="453" y="669">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-7.91266" />
                                        <Key frame="20" value="-7.91266" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="-1.40867" />
                                        <Key frame="20" value="-1.40867" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.00743" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.32579" />
                                        <Key frame="20" value="-6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-23.0252" />
                                        <Key frame="20" value="-83.2359" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.5033" />
                                        <Key frame="20" value="-2.28279" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.20952" />
                                        <Key frame="20" value="7.20472" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.68218" />
                                        <Key frame="20" value="6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-10.1051" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.53958" />
                                        <Key frame="20" value="-5.44688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.7252" />
                                        <Key frame="20" value="44.4756" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="10.8083" />
                                        <Key frame="20" value="17.6686" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="7.3805" />
                                        <Key frame="20" value="60.2961" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.18802" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.59429" />
                                        <Key frame="20" value="6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="23.2937" />
                                        <Key frame="20" value="83.2359" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.4984" />
                                        <Key frame="20" value="2.28279" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.11683" />
                                        <Key frame="20" value="7.20472" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.85315" />
                                        <Key frame="20" value="-6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-10.1051" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.44688" />
                                        <Key frame="20" value="-5.44688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="81.5659" />
                                        <Key frame="20" value="44.4756" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-11.1647" />
                                        <Key frame="20" value="-17.6686" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="3.68905" />
                                        <Key frame="20" value="-60.2961" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Bottom Left" id="8" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="450" y="575">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-7.91266" />
                                        <Key frame="20" value="-8.26423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="-1.40867" />
                                        <Key frame="20" value="-0.529749" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.00743" />
                                        <Key frame="20" value="5.18321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.32579" />
                                        <Key frame="20" value="-6.4137" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-23.0252" />
                                        <Key frame="20" value="-8.96255" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.5033" />
                                        <Key frame="20" value="-23.5574" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.20952" />
                                        <Key frame="20" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.68218" />
                                        <Key frame="20" value="6.85796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.53958" />
                                        <Key frame="20" value="-5.45169" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.7252" />
                                        <Key frame="20" value="55.5452" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="10.8083" />
                                        <Key frame="20" value="39.0215" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="7.3805" />
                                        <Key frame="20" value="-6.06693" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.18802" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.59429" />
                                        <Key frame="20" value="6.41851" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="23.2937" />
                                        <Key frame="20" value="22.6785" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.4984" />
                                        <Key frame="20" value="66.0043" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.11683" />
                                        <Key frame="20" value="7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.85315" />
                                        <Key frame="20" value="-6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.44688" />
                                        <Key frame="20" value="-5.53478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="81.5659" />
                                        <Key frame="20" value="83.8511" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-11.1647" />
                                        <Key frame="20" value="-10.0221" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="3.68905" />
                                        <Key frame="20" value="-5.71537" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Middle Right" id="10" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="448" y="484">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-7.91266" />
                                        <Key frame="20" value="-8.26423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="-1.40867" />
                                        <Key frame="20" value="0.529749" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.00743" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.32579" />
                                        <Key frame="20" value="-6.41851" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-23.0252" />
                                        <Key frame="20" value="-23.3816" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.5033" />
                                        <Key frame="20" value="-66.0043" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.20952" />
                                        <Key frame="20" value="7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.68218" />
                                        <Key frame="20" value="6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.53958" />
                                        <Key frame="20" value="-5.53478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.7252" />
                                        <Key frame="20" value="83.8511" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="10.8083" />
                                        <Key frame="20" value="10.0221" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="7.3805" />
                                        <Key frame="20" value="5.71537" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.18802" />
                                        <Key frame="20" value="5.18321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.59429" />
                                        <Key frame="20" value="6.4137" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="23.2937" />
                                        <Key frame="20" value="23.7284" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.4984" />
                                        <Key frame="20" value="12.9225" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.11683" />
                                        <Key frame="20" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.85315" />
                                        <Key frame="20" value="-6.85796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.44688" />
                                        <Key frame="20" value="-5.45169" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="81.5659" />
                                        <Key frame="20" value="7.55628" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-11.1647" />
                                        <Key frame="20" value="-56.2483" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="3.68905" />
                                        <Key frame="20" value="-8.34731" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Middle Middle" id="11" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="448" y="392">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-7.91266" />
                                        <Key frame="20" value="-7.91266" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="-1.40867" />
                                        <Key frame="20" value="-1.40867" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.00743" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.32579" />
                                        <Key frame="20" value="-6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-23.0252" />
                                        <Key frame="20" value="-87.8062" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.5033" />
                                        <Key frame="20" value="0.353968" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.20952" />
                                        <Key frame="20" value="7.20472" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.68218" />
                                        <Key frame="20" value="6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-10.1051" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.53958" />
                                        <Key frame="20" value="-5.44688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.7252" />
                                        <Key frame="20" value="10.11" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="10.8083" />
                                        <Key frame="20" value="28.3035" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="7.3805" />
                                        <Key frame="20" value="20.7449" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.18802" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.59429" />
                                        <Key frame="20" value="6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="23.2937" />
                                        <Key frame="20" value="87.8062" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.4984" />
                                        <Key frame="20" value="-0.353968" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.11683" />
                                        <Key frame="20" value="7.20472" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.85315" />
                                        <Key frame="20" value="-6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-10.1051" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.44688" />
                                        <Key frame="20" value="-5.44688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="81.5659" />
                                        <Key frame="20" value="10.11" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-11.1647" />
                                        <Key frame="20" value="-28.3035" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="3.68905" />
                                        <Key frame="20" value="-20.7449" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Middle Left" id="12" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="445" y="299">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-7.91266" />
                                        <Key frame="20" value="-8.26423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="-1.40867" />
                                        <Key frame="20" value="-0.529749" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.00743" />
                                        <Key frame="20" value="5.18321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.32579" />
                                        <Key frame="20" value="-6.4137" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-23.0252" />
                                        <Key frame="20" value="-23.7284" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.5033" />
                                        <Key frame="20" value="-12.9225" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.20952" />
                                        <Key frame="20" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.68218" />
                                        <Key frame="20" value="6.85796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.53958" />
                                        <Key frame="20" value="-5.45169" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.7252" />
                                        <Key frame="20" value="7.55628" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="10.8083" />
                                        <Key frame="20" value="56.2483" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="7.3805" />
                                        <Key frame="20" value="8.34731" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.18802" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.59429" />
                                        <Key frame="20" value="6.41851" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="23.2937" />
                                        <Key frame="20" value="23.3816" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.4984" />
                                        <Key frame="20" value="66.0043" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.11683" />
                                        <Key frame="20" value="7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.85315" />
                                        <Key frame="20" value="-6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.44688" />
                                        <Key frame="20" value="-5.53478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="81.5659" />
                                        <Key frame="20" value="83.8511" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-11.1647" />
                                        <Key frame="20" value="-10.0221" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="3.68905" />
                                        <Key frame="20" value="-5.71537" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Top Right" id="14" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="447" y="206">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-7.91266" />
                                        <Key frame="20" value="-8.26423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="1.40867" />
                                        <Key frame="20" value="0.529749" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.18802" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.59429" />
                                        <Key frame="20" value="-6.41851" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-23.2937" />
                                        <Key frame="20" value="-22.7664" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.4984" />
                                        <Key frame="20" value="-68.2895" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.11683" />
                                        <Key frame="20" value="7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.85315" />
                                        <Key frame="20" value="6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.44688" />
                                        <Key frame="20" value="-5.53478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="81.5659" />
                                        <Key frame="20" value="84.4664" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="11.1647" />
                                        <Key frame="20" value="10.2857" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="-3.68905" />
                                        <Key frame="20" value="5.3638" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.00743" />
                                        <Key frame="20" value="5.18321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.32579" />
                                        <Key frame="20" value="6.4137" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="23.0252" />
                                        <Key frame="20" value="31.9023" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.5033" />
                                        <Key frame="20" value="-12.3903" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.20952" />
                                        <Key frame="20" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.68218" />
                                        <Key frame="20" value="-6.85796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.53958" />
                                        <Key frame="20" value="-5.45169" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.7252" />
                                        <Key frame="20" value="-34.2802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-10.8083" />
                                        <Key frame="20" value="-52.9963" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="-7.3805" />
                                        <Key frame="20" value="0.969218" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Top Middle" id="15" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="441" y="107">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-7.91266" />
                                        <Key frame="20" value="-7.91266" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="-1.40867" />
                                        <Key frame="20" value="-1.40867" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.00743" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.32579" />
                                        <Key frame="20" value="-6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-23.0252" />
                                        <Key frame="20" value="-85.521" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.5033" />
                                        <Key frame="20" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.20952" />
                                        <Key frame="20" value="7.20472" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.68218" />
                                        <Key frame="20" value="6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-10.1051" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.53958" />
                                        <Key frame="20" value="-5.44688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.7252" />
                                        <Key frame="20" value="-38.4942" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="10.8083" />
                                        <Key frame="20" value="25.1394" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="7.3805" />
                                        <Key frame="20" value="-20.9158" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.18802" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.59429" />
                                        <Key frame="20" value="6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="23.2937" />
                                        <Key frame="20" value="85.521" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.4984" />
                                        <Key frame="20" value="-7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.11683" />
                                        <Key frame="20" value="7.20472" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.85315" />
                                        <Key frame="20" value="-6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-10.1051" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.44688" />
                                        <Key frame="20" value="-5.44688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="81.5659" />
                                        <Key frame="20" value="-38.4942" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-11.1647" />
                                        <Key frame="20" value="-25.1394" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="3.68905" />
                                        <Key frame="20" value="20.9158" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Top Left" id="16" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="437" y="10">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="nao">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="1" value="-7.91266" />
                                        <Key frame="20" value="-8.26423" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="1" value="-1.40867" />
                                        <Key frame="20" value="-0.529749" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.00743" />
                                        <Key frame="20" value="5.18321" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.32579" />
                                        <Key frame="20" value="-6.4137" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="-23.0252" />
                                        <Key frame="20" value="-31.9023" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="-67.5033" />
                                        <Key frame="20" value="12.3903" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.20952" />
                                        <Key frame="20" value="7.38531" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.68218" />
                                        <Key frame="20" value="6.85796" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.53958" />
                                        <Key frame="20" value="-5.45169" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="84.7252" />
                                        <Key frame="20" value="-34.2802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="10.8083" />
                                        <Key frame="20" value="52.9963" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="7.3805" />
                                        <Key frame="20" value="-0.969218" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="1" value="5.18802" />
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="1" value="6.59429" />
                                        <Key frame="20" value="6.41851" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="1" value="23.2937" />
                                        <Key frame="20" value="22.7664" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="1" value="67.4984" />
                                        <Key frame="20" value="68.2895" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHand" mute="1" unit="1" />
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="1" value="7.11683" />
                                        <Key frame="20" value="7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="1" value="-6.85315" />
                                        <Key frame="20" value="-6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="1" value="-10.1051" />
                                        <Key frame="20" value="-9.84147" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="1" value="-5.44688" />
                                        <Key frame="20" value="-5.53478" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="1" value="81.5659" />
                                        <Key frame="20" value="84.4664" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="1" value="-11.1647" />
                                        <Key frame="20" value="-10.2857" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="1" value="3.68905" />
                                        <Key frame="20" value="-5.3638" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Timeline" id="2" localization="8" tooltip="This box is empty (contains a single motion layer with no motor position&#x0A;defined in it) and should be used to create any animation you would like." x="1122" y="338">
                                  <bitmap>media/images/box/movement/move.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                  <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="20">
                                    <BehaviorLayer name="behavior_layer1">
                                      <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram />
                                      </BehaviorKeyframe>
                                    </BehaviorLayer>
                                    <ActuatorList model="">
                                      <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0">
                                        <Key frame="20" value="-7.91266" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0">
                                        <Key frame="20" value="-1.40867" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnklePitch" mute="0" unit="0">
                                        <Key frame="20" value="5.00743" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LAnkleRoll" mute="0" unit="0">
                                        <Key frame="20" value="-6.32579" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0">
                                        <Key frame="20" value="-23.0252" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0">
                                        <Key frame="20" value="-67.5033" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipPitch" mute="0" unit="0">
                                        <Key frame="20" value="7.20952" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipRoll" mute="0" unit="0">
                                        <Key frame="20" value="6.68218" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LHipYawPitch" mute="0" unit="0">
                                        <Key frame="20" value="-10.1051" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LKneePitch" mute="0" unit="0">
                                        <Key frame="20" value="-5.53958" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0">
                                        <Key frame="20" value="84.7252" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0">
                                        <Key frame="20" value="10.8083" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0">
                                        <Key frame="20" value="7.3805" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnklePitch" mute="0" unit="0">
                                        <Key frame="20" value="5.18802" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RAnkleRoll" mute="0" unit="0">
                                        <Key frame="20" value="6.59429" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0">
                                        <Key frame="20" value="23.2937" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0">
                                        <Key frame="20" value="67.4984" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipPitch" mute="0" unit="0">
                                        <Key frame="20" value="7.11683" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipRoll" mute="0" unit="0">
                                        <Key frame="20" value="-6.85315" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RHipYawPitch" mute="0" unit="0">
                                        <Key frame="20" value="-10.1051" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RKneePitch" mute="0" unit="0">
                                        <Key frame="20" value="-5.44688" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0">
                                        <Key frame="20" value="81.5659" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0">
                                        <Key frame="20" value="-11.1647" />
                                      </ActuatorCurve>
                                      <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0">
                                        <Key frame="20" value="3.68905" />
                                      </ActuatorCurve>
                                    </ActuatorList>
                                  </Timeline>
                                </Box>
                                <Box name="Wait" id="3" localization="8" tooltip="Wait a moment before sending a signal on the output. &#x0A;Can be stopped anytime. &#x0A;Stimulating the input again before output is activated restarts the waiting period.&#x0A;" x="797" y="350">
                                  <bitmap>media/images/box/wait.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.waiting = None

    def onUnload(self):
        self.cancelWaiting()

    def triggerOutput(self):
        self.timerOutput()

    def cancelWaiting(self):
        if self.waiting:
            self.waiting.cancel()
        self.waiting = None

    def onInput_onStart(self):
        self.cancelWaiting()
        import qi
        self.waiting = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.waiting and self.waiting.isRunning():
            self.timerOutput()
        self.onUnload()]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Wait box with the configured timeout value." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                  <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once time set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                  <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                  <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently waiting and cancelled, output will be stimulated." id="6" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="16" indexofinput="2" outputowner="1" indexofoutput="4" />
                                <Link inputowner="15" indexofinput="2" outputowner="1" indexofoutput="5" />
                                <Link inputowner="14" indexofinput="2" outputowner="1" indexofoutput="6" />
                                <Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="7" />
                                <Link inputowner="11" indexofinput="2" outputowner="1" indexofoutput="8" />
                                <Link inputowner="10" indexofinput="2" outputowner="1" indexofoutput="9" />
                                <Link inputowner="8" indexofinput="2" outputowner="1" indexofoutput="10" />
                                <Link inputowner="7" indexofinput="2" outputowner="1" indexofoutput="11" />
                                <Link inputowner="6" indexofinput="2" outputowner="1" indexofoutput="12" />
                                <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="16" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="15" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="14" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="12" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="11" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="10" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="8" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="7" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="5" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="6" indexofinput="2" outputowner="4" indexofoutput="5" />
                      <Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="8" />
                      <Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="9" />
                      <Link inputowner="2" indexofinput="3" outputowner="1" indexofoutput="10" />
                      <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="4" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="6" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Handle Cheating" id="2" localization="8" tooltip="Detect and cheating that may have taken place, and determine the type of cheating." x="603" y="94">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Output name="onCheat" type="1" type_size="1" nature="1" inner="0" tooltip="" id="5" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Detect Cheating" id="7" localization="8" tooltip="Takes the game state calculated in Calculate Game State and compare it with the previous game state. This comparison checks for cheating. If cheating is found, control is passed to On Cheating box, elsewise control is passed to On Success box." x="180" y="121">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import sys
from naoqi import ALProxy

# helper functions
def yWord(y):
    if y == 0:
        return "top"
    elif y == 1:
        return "middle"
    elif y == 2:
        return "bottom"

def xWord(x):
    if x == 0:
        return "left"
    elif x == 1:
        return "middle"
    elif x == 2:
        return "right"

def transpose(X):
    result = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]
    return result

def sPrint(c, s):
    c.logger.info(s)

def failPrint(c, failMsgs, s):
    sPrint(c, s)
    failMsgs.append(s)
    return failMsgs, True

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # init memory access
        try:
            self.mem = self.session().service( "ALMemory" )
        except Exception, e:
            self.logger.info("Error when creating ALMemory proxy:")
            self.logger.info(str(e))
            exit(1)

        #self.mem.insertData("myValueName1", "myValue1")
        #self.logger.info(self.mem.getData("myValueName1"))

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, newBoard):
        # initialize variables
        #oldBoard = [["-","X","O"],["X","O","-"],["-","-","-"]]
        #newBoard = [["-","X","O"],["X","O","-"],["-","X","-"]]
        #robotTurn = True
        #expectedSymbol = "X"
        #robotCoords = [0,0]

        #self.mem.insertData("board", [["-","X","O"],["X","O","-"],["-","-","-"]])
        #self.mem.insertData("turn", "robot")
        #self.mem.insertData("robotCoords", [0,0])
        #self.mem.insertData("marker", "O")

        oldBoard = self.mem.getData("board")
        robotTurn = True if self.mem.getData("turn") == "robot" else False
        if robotTurn == True:
            robotCoords = self.mem.getData("robotCoords")
            playedSymbol = self.mem.getData("playedSymbol")
        expectedSymbol = None
        if self.mem.getData("marker") == "X":
            expectedSymbol = "O" if robotTurn == True else "X"
        else:
            expectedSymbol = "X" if robotTurn == True else "O"

        newSymbols = [[None] * len(elem) for elem in oldBoard]
        newSymbolCoords = []

        failMsgs = []
        failed = False

        # evaluate board state differences
        for y in range(len(oldBoard)):
            for x in range(len(oldBoard[0])):
                if (newBoard[y][x] != oldBoard[y][x]):
                    # check for erased symbols
                    if newBoard[y][x] == "-":
                        failMsgs, failed = failPrint(self, failMsgs, "Erased symbol at " + yWord(y) + ", " + xWord(x))
                    #check for changed symbols
                    if oldBoard[y][x] != "-":
                        if newBoard[y][x] == "X":
                            failMsgs, failed = failPrint(self, failMsgs, "O changed to X at " + yWord(y) + ", " + xWord(x))
                        elif newBoard[y][x] == "O":
                            failMsgs, failed = failPrint(self, failMsgs, "X changed to O at " + yWord(y) + ", " + xWord(x))
                    else:
                        # store new symbols
                        newSymbolCoords.append([y,x])
                        newSymbols[y][x] = newBoard[y][x]

        # check for the proper placement of new symbols
        lenNewSymbols = len(newSymbolCoords)
        # verify that the robot coord is placed
        if robotTurn:
            if newBoard[robotCoords[0]][robotCoords[1]] == "-":
                    failMsgs, failed = failPrint(self, failMsgs, "Expected symbol at " + yWord(robotCoords[0]) + ", " + xWord(robotCoords[1]))
            if lenNewSymbols == 0:
                failMsgs, failed = failPrint(self, failMsgs, "No new symbols detected")
            else:
                for coord in newSymbolCoords:
                    if (robotCoords[0] != coord[0] or robotCoords[1] != coord[1]):
                        failMsgs, failed = failPrint(self, failMsgs, "Extra symbol at " + yWord(coord[0]) + ", " + xWord(coord[1]))
                    else:
                        if self.mem.getData("game") != "wild":
                            if expectedSymbol != newSymbols[coord[0]][coord[1]]:
                                failMsgs, failed = failPrint(self, failMsgs, "Incorrect symbol at " + yWord(coord[0]) + ", " + xWord(coord[1]))
                        else:
                            if playedSymbol != newBoard[robotCoords[0]][robotCoords[1]]:
                                failMsgs, failed = failPrint(self, failMsgs, "Incorrect symbol at " + yWord(coord[0]) + ", " + xWord(coord[1]))
        # choose which new symbol to keep on player turn
        else:
            if lenNewSymbols == 0:
                failMsgs, failed = failPrint(self, failMsgs, "No new symbols detected")
            else:
                if lenNewSymbols > 1:
                    for coord in newSymbolCoords:
                        failMsgs, failed = failPrint(self, failMsgs, "Extra symbol at " + yWord(coord[0]) + ", " + xWord(coord[1]))
                    failMsgs, failed = failPrint(self, failMsgs, "Please keep only one new symbol")
                else:
                    newCoord = newSymbolCoords[0]
                    if self.mem.getData("game") != "wild":
                        if expectedSymbol != newSymbols[newCoord[0]][newCoord[1]]:
                            failMsgs, failed = failPrint(self, failMsgs, "Incorrect symbol at " + yWord(newCoord[0]) + ", " + xWord(newCoord[1]))

        sPrint(self, failMsgs)
        sPrint(self, "Failed: " + str(failed))
        if failed == True:
            self.onCheat(failMsgs)
        else:
            self.mem.insertData("board", newBoard)
            self.onSuccess()

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onSuccess() #activate the output of the boxs]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input.&#x0A;Input is 2D array representing game state." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onSuccess" type="1" type_size="1" nature="1" inner="0" tooltip="A valid move has been made." id="4" />
                        <Output name="onCheat" type="0" type_size="1" nature="1" inner="0" tooltip="Human has cheated in some way." id="5" />
                      </Box>
                      <Box name="OnCheating" id="8" localization="8" tooltip="The human player has cheated in some way. Robot prompts human to set the board to how it should be and tap the robot&apos;s head when fixes are done." x="448" y="166">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import sys
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Create a proxy to ALTextToSpeech
        try:
            self.tts = self.session().service( "ALTextToSpeech" )
        except Exception, e:
            self.logger.info("Error when creating ALTextToSpeech proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        for m in p:
            self.tts.say(m)
        self.tts.say("Tap my head when you have corrected the board.")
        self.onStopped() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="Wait For Signals" id="1" localization="8" tooltip="Wait for both inputs to be stimulated before stimulating its output." x="704" y="224">
                        <bitmap>media/images/box/wait.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.ok = [False]*2

    def onUnload(self):
        #puts code for box cleanup here
        ""

    def onStart(self, nInput):
        self.ok[nInput-1] = True
        bOutput = True
        for bOk in self.ok:
            bOutput = bOutput and bOk
        if( bOutput ):
            self.ok = [False]*2
            self.signalsReceived()

    def onInput_signal1(self):
        self.onStart(1)

    def onInput_signal2(self):
        self.onStart(2)]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="signal1" type="1" type_size="1" nature="1" inner="0" tooltip="First signal to wait." id="2" />
                        <Input name="signal2" type="1" type_size="1" nature="1" inner="0" tooltip="Second signal to wait." id="3" />
                        <Output name="signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when both inputs have been stimulated." id="4" />
                      </Box>
                      <Box name="Tactile Head" id="2" localization="8" tooltip="Detect touch on head tactile sensor." x="443" y="330">
                        <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
                        <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
                        <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
                        <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
                        <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
                        <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                                  <bitmap>media/images/box/box-diagram.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                                    </content>
                                  </script>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                  <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                                <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                                <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                                <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                        <Resource name="Head-sequence" type="Lock" timeout="0" />
                      </Box>
                      <Link inputowner="7" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="8" indexofinput="2" outputowner="7" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="4" outputowner="7" indexofoutput="4" />
                      <Link inputowner="1" indexofinput="2" outputowner="8" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="7" indexofoutput="5" />
                      <Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="8" />
                      <Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="9" />
                      <Link inputowner="1" indexofinput="3" outputowner="2" indexofoutput="10" />
                      <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Box name="Advance Turn" id="9" localization="8" tooltip="A valid move has been made on the board. Update the global board state to reflect the new move, update player turn. Also check for if there is a winner/tie. In this event go to On Game End box, otherwise go to Next Turn box." x="212" y="254">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import sys
from naoqi import ALProxy

class MyClass(GeneratedClass):

    def isWinner(self, b, l):
        return ((b[0][0] == l and b[0][1] == l and b[0][2] == l) or # top across
        (b[1][0] == l and b[1][1] == l and b[1][2] == l) or # middle across
        (b[2][0] == l and b[2][1] == l and b[2][2] == l) or # bottom across
        (b[0][0] == l and b[1][0] == l and b[2][0] == l) or # left down
        (b[0][1] == l and b[1][1] == l and b[2][1] == l) or # middle down
        (b[0][2] == l and b[1][2] == l and b[2][2] == l) or # right down
        (b[0][0] == l and b[1][1] == l and b[2][2] == l) or # downward diagnol
        (b[2][0] == l and b[1][1] == l and b[0][2] == l)) # forward diagnol

    # Returns true if there is a marker on every spot of the board
    def isBoardFull(self, b):
        return ((b[0][0] != "-") and
        (b[0][1] != "-") and
        (b[0][2] != "-") and
        (b[1][0] != "-") and
        (b[1][1] != "-") and
        (b[1][2] != "-") and
        (b[2][0] != "-") and
        (b[2][1] != "-") and
        (b[2][2] != "-"))

    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Create a proxy to ALMemory
        try:
            self.mem = self.session().service( "ALMemory" )
        except Exception, e:
            self.logger.info("Error when creating ALMemory proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.logger.info("advance turn")
        p = self.mem.getData("board")
        gameMode = self.mem.getData("game")
        turn = self.mem.getData("turn")
        # Determine if there is a winner
        if gameMode == "regular" and (self.isWinner(p, "X") or self.isWinner(p, "O")):
            if self.isWinner(p, "X"):
                if self.mem.getData("marker") == "X":
                    self.onGameEnd("human")
                else:
                    self.onGameEnd("robot")
            elif self.isWinner(p, "O"):
                if self.mem.getData("marker") == "O":
                    self.onGameEnd("human")
                else:
                    self.onGameEnd("robot")
        elif gameMode == "wild" and (self.isWinner(p, "X") or self.isWinner(p, "O")):
            if turn == "human" and (self.isWinner(p, "X") or self.isWinner(p, "O")):
                self.onGameEnd("human")
            elif turn == "robot" and (self.isWinner(p, "X") or self.isWinner(p, "O")):
                self.onGameEnd("robot")
        elif gameMode == "reverse" and (self.isWinner(p, "X") or self.isWinner(p, "O")):
            if self.isWinner(p, "X"):
                if self.mem.getData("marker") == "X":
                    self.onGameEnd("robot")
                else:
                    self.onGameEnd("human")
            elif self.isWinner(p, "O"):
                if self.mem.getData("marker") == "O":
                    self.onGameEnd("robot")
                else:
                    self.onGameEnd("human")
        elif self.isBoardFull(p):
            self.onGameEnd("tie")
        else:
            # Change who's turn it is
            if self.mem.getData("turn") == "human":
                self.mem.insertData("turn", "robot")
            else:
                self.mem.insertData("turn", "human")
            self.logger.info("next turn")
            self.onTurnDone() #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onTurnDone() #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onTurnDone" type="1" type_size="1" nature="1" inner="0" tooltip="A valid turn is complete, and there is no winner yet." id="4" />
              <Output name="onGameEnd" type="3" type_size="1" nature="1" inner="0" tooltip='Tell On Game End if the winner is &quot;human&quot;, &quot;robot&quot;, or &quot;tie&quot;.' id="5" />
            </Box>
            <Box name="Advance Turn Test" id="4" localization="8" tooltip="" x="86" y="433">
              <bitmap>media/images/box/box-python-script.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[import sys
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Create a proxy to ALMemory
        try:
            self.mem = self.session().service( "ALMemory" )
        except Exception, e:
            self.logger.info("Error when creating ALMemory proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.mem.insertData("turn", "human")
        self.mem.insertData("marker", "X")
        self.onStopped([["O", "-", "-"], ["O", "-", "-"], ["O", "-", "-"]]) #activate the output of the box


    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped(p) #activate the output of the box]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
            </Box>
            <Box name="Game End" id="5" localization="8" tooltip="Robot vocally tells human who won, or if there was a tie.&#x0A;Robot asks player if they want to play again and ends the program or goes back to Initialize Game accordingly." x="426" y="268">
              <bitmap>media/images/box/box-diagram.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onGameRestart" type="1" type_size="1" nature="1" inner="0" tooltip="" id="4" />
              <Output name="onGameEnd" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="5" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="On Game End" id="10" localization="8" tooltip="Robot vocally tells human who won, or if there was a tie.&#x0A;Robot asks player if they want to play again and ends the program or goes back to Initialize Game accordingly." x="207" y="61">
                        <bitmap>media/images/box/box-python-script.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import sys
from naoqi import ALProxy

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        # Create a proxy to ALTextToSpeech
        try:
            self.tts = self.session().service( "ALTextToSpeech" )
        except Exception, e:
            self.logger.info("Error when creating ALTextToSpeech proxy:")
            self.logger.info(str(e))
            exit(1)

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        if p == "human":
            self.tts.say("You won!")
        elif p == "robot":
            self.tts.say("I win! Ha ha you are a loser.")
        else:
            self.tts.say("We tied.")
        self.onGameEnd() #activate the output of the box

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onGameRestart() #activate the output of the box]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onGameEnd" type="1" type_size="1" nature="1" inner="0" tooltip="Human wants to stop playing." id="4" />
                      </Box>
                      <Box name="Play Again Choice" id="1" localization="8" tooltip="The Choice box is based on the speech recognition engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. The recognized answer is sent to the answer output.&#x0A;&#x0A;Note that you must open this box to enter the question text and the&#x0A;available answers." x="452" y="68">
                        <bitmap>media/images/box/interaction/choice.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
                        <Output name="yes" type="1" type_size="1" nature="1" inner="0" tooltip="Answer recognized." id="5" />
                        <Output name="no" type="1" type_size="1" nature="1" inner="0" tooltip="" id="6" />
                        <Timeline enable="0">
                          <BehaviorLayer name="behavior_layer1">
                            <BehaviorKeyframe name="keyframe1" index="1">
                              <Diagram>
                                <Box name="Choice" id="1" localization="8" tooltip="The Choice box is based on the dialog engine: it expects a defined number of predicted answers . The box&#x0A;includes interactive help during the behavior thanks to the head tactile sensor. Each recognized answer stimulate its&#x0A;corresponding output.&#x0A;Setting the choices in the box table:&#x0A;- Edit a choice by left double-clicking on its line.&#x0A;- Add a choice by right clicking on a line and selecting &apos;Insert a row&apos;.&#x0A;- Delete a choice by right clicking on its line and selecting &apos;Remove a row&apos;.&#x0A;- Write alternative answers for one choice by separating the phrases with &apos;/&apos; in the same line (e.g.: apple pie / pie / apple)." plugin="ui_choice_plugin" x="312" y="51">
                                  <bitmap>media/images/box/interaction/choice.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
# -*- coding: utf-8 -*-
# script of the Choice box v9
# @author Desktop Application team
# (c) 2014 Aldebaran Robotics

import os
import tempfile
import shutil
import uuid
import time
import random
import thread
import mutex
import xml.dom.minidom

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

        # VARIABLES INITIALIZATION
        self.aIdsTTS = []
        self.bSentencesInitialized = False
        self.bMustStop = False
        self.bIsRunning = False
        self.dialogIsRunning = False
        self.dialogIsLoaded = False
        self.bGoOut = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.bInTactileSensorMenu = False
        self.bExternChoices = False
        self.rTimeLastChoiceSaid = -1.
        self.bIsSayingChoice = False
        self.nIndexChoice = 0
        self.sRecoInterruption = "" # = "wordRecognised" or "timeout" or "onStop" or "onTactileSensor"
        self.sPreviousAnswer = ""
        self.rTimeWhenActionMadeInTactileMenu = -1.

        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.langDict = {
            "Arabic":"arw",
            "Czech":"czc",
            "Danish":"dad",
            "German":"ged",
            "Greek":"grg",
            "English":"enu",
            "Spanish":"spe",
            "Finnish":"fif",
            "French":"frf",
            "Italian":"iti",
            "Japanese":"jpj",
            "Korean":"kok",
            "Dutch":"dun",
            "Norwegian":"nor",
            "Polish":"plp",
            "Brazilian":"ptb",
            "Portuguese":"ptp",
            "Russian":"rur",
            "Swedish":"sws",
            "Turkish":"trt",
            "Chinese":"mnc",
            "MandarinTaiwan":"mnt"
        }
        # end - choices

        # variables used for the tactile sensor
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.bIsStoringParam = False
        self.bPressed = False
        self.mutexProcessCurrentState = mutex.mutex()
        self.mutexTactilTouched = mutex.mutex()
        self.mutexCheckIfSeqsCorrespondingLeft = mutex.mutex()
        # assuming that every sequence is after [0, 0, 0]
        # and then start with one tactil sensor activated
        # timeout must be either a number (int or float) not equal to 0 or an array of two numbers not equal to 0, a negative one and a positive one
        # a negative timeout means a minimum time that has to ellapse before the next step
        # a positive timeout means a maximum time before the next step must show up
        self.aSeqs = [{"name" : "Tap", "statesAndTimeout" : [ "1+", 0.35, "2+", 0.45, "0" ]},
                      {"name" : "TapFront", "statesAndTimeout" : [ "F", 1, "0" ]},
                      {"name" : "LongFront", "statesAndTimeout" : [ "F", -1, "F" ]},
                      {"name" : "TapMiddle", "statesAndTimeout" : [ "M", 1, "0" ]},
                      {"name" : "LongMiddle", "statesAndTimeout" : [ "M", -1, "M" ]},
                      {"name" : "TapRear", "statesAndTimeout" : [ "R", 1, "0" ]},
                      {"name" : "LongRear", "statesAndTimeout" : [ "R", -1, "R" ]},
                      {"name" : "CalmDown", "statesAndTimeout" : [ "1+", 0.5, "2+", -1, "2+" ]}]
        # sequences initialization
        aSeqsTemp = []
        for seq in self.aSeqs:
            try: # ensure that the sequence has at least a name and states and timeout defined
                seq["name"]
                seq["statesAndTimeout"]
                aSeqsTemp.append(seq)
            except:
                pass
        self.aSeqs = aSeqsTemp
        for seq in self.aSeqs:
            states = range( len( seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] ) )
            i = 0
            for state in seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2]:
                states[i] = self.convertToArrayOfPossibleStates(state)
                i += 1
            seq["statesAndTimeout"][0:len(seq["statesAndTimeout"]):2] = states
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        # end - variables used for the tactile sensor
        self.aChoices = []
        self.aDialogChoices = []
        self.aChoiceIndexes = []
        # parameters which can be changed from the parameters edition window
        self.sQuestion = ""
        self.nTimeoutReco = 10
        self.nTimeoutRecoConfirmation = 6
        self.nTimeoutTactile = 10
        self.nMaxCountNoReply = 3
        self.nMaxCountFailure = 5
        self.arUnderstoodThreshold = [0.0, 1.0] # range of self.rUnderstoodThreshold
        self.arConfirmationThreshold = [0.0, 1.0] # range of self.rConfirmationThreshold (must be higher than self.arUnderstoodThreshold)
        self.rUnderstoodThreshold = 0.2
        self.rConfirmationThreshold = 0.4
        self.bActivateHelpWhenFailure = True
        self.bRepeatValidatedChoice = True
        self.bActivateDefaultChoiceHelp = True
        self.bActivateDefaultChoiceRepeat = True
        self.bActivateDefaultChoiceExit = True
        self.BIND_PYTHON(self.getName(), "onTactilTouched")

# FUNCTIONS ===============================================================================================

    def onLoad(self):
        # SERVICE INITIALIZATIONS
        self.animSpeech = self.session().service("ALAnimatedSpeech")
        self.tts = self.session().service("ALTextToSpeech")
        self.memory = self.session().service("ALMemory")
        self.motion = self.session().service("ALMotion")

        try:
            self.dcm = self.session().service( "DCM" )
        except:
            self.dcm = None

        try:
            self.dialog = self.session().service("ALDialog")
        except:
            self.dialog = None
            raise RuntimeError("Choice box cannot be launched, as Dialog is not available.")

        # initialize sentences for each language
        if( not self.bSentencesInitialized ):
            self.initializeSentences()
            self.bSentencesInitialized = True
        self.generateTopicFile()

# XML PARSER FOR SENTENCES INITIALIZATION
    def initializeSentences(self):
        "Initialize necessary sentences in each language."
        # choices
        # !!! don't remove any comments from this variable !!!
        # (they are here to make the plugin work)
        self.aListAllChoices = {"Arabic": ["نعم", "لا", ""], "Brazilian": ["sim", "não", ""], "Chinese": ["是", "不是", ""], "Czech": ["ano", "ne", ""], "Danish": ["ja", "nej", ""], "Dutch": ["ja", "nee", ""], "English": ["yes", "no", ""], "Finnish": ["kyllä", "ei", ""], "French": ["oui", "non", ""], "German": ["ja", "nein", ""], "Greek": [], "Italian": ["sì", "no", ""], "Japanese": ["はい", "いいえ", ""], "Korean": ["예", "아니", ""], "MandarinTaiwan": ["是", "不是", ""], "Norwegian": [], "Polish": ["tak", "nie", ""], "Portuguese": ["sim", "não", ""], "Russian": ["да", "нет", ""], "Spanish": ["si", "no", ""], "Swedish": ["ja", "ingen", ""], "Turkish": ["evet", "hayır", ""]
                               }
        # end - choices

# INPUTS ACTIVATION PROCESSING ------------------------------------------------------------------------------
    def onInput_onStart(self, question=None):
        "Initialize variables and start box behaviour."
        self.logger.debug( "Input onStart stimulated." )
        if( self.bIsRunning): # to avoid starting the process twice
            return
        self.bIsRunning = True
        language = self.tts.getLanguage()
        try:
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.getLocalizedStringList("TTS confirmation")
            self.getLocalizedStringList("TTS enumMarks")
            self.getLocalizedStringList("TTS helpEnumChoices")
            self.getLocalizedStringList("TTS helpEnumDefault")
            self.getLocalizedStringList("TTS helpTactile")
            self.getLocalizedStringList("TTS notUnderstood")
            self.getLocalizedStringList("TTS noQuestion")
            self.getLocalizedStringList("TTS notUnderstoodAnims")
        except Exception as e:
            raise Exception( "The current language is not supported by this Choice box. Internal sentences are missing for this language. (%s)" % e)
        self.bGoOut = False
        self.bVocabularyLoaded = False
        self.sRecoInterruption = ""
        self.sPreviousAnswer = ""
        self.bMustStop = False
        self.nCountNoReply = 0
        self.nCountFailure = 0
        self.bInConfirmation = False
        self.bInTactileSensorMenu = False
        self.bBrainAnimPaused = False
        self.bPressed = False
        self.rTimeWhenActionMadeInTactileMenu = -1.
        self.nFront = 0
        self.nMiddle = 0
        self.nRear = 0
        self.bSeqStarted = False
        self.guid = ""
        self.lastHeadPos = None
        self.rUnderstoodThreshold = self.tryGetParameter( "Minimum threshold to understand", 0.2 )
        self.rConfirmationThreshold = self.tryGetParameter( "Minimum threshold to be sure", 0.4 )
        self.nTimeoutReco = self.tryGetParameter( "Speech recognition timeout", 10 )
        self.nTimeoutRecoConfirmation = self.tryGetParameter( "Speech recognition timeout when confirmation", 6 )
        self.nTimeoutTactile = self.tryGetParameter( "Tactile sensor menu timeout", 10 )
        self.nMaxCountNoReply = self.tryGetParameter( "Maximum number of repetition when no reply", 3 )
        self.nMaxCountFailure = self.tryGetParameter( "Maximum number of repetition when failure", 5 )
        self.bActivateBrainLight =  True
        self.bActivateHelpWhenFailure = self.tryGetParameter( "Activate help when failure", True )
        self.bRepeatValidatedChoice = self.tryGetParameter( "Repeat validated choice", True )
        self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
        self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
        self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
        self.bodyLanguageMode = self.tryGetParameter( "Body language mode", "contextual" )
        self.dialog.setASRConfidenceThreshold(self.rUnderstoodThreshold )
        self.animSpeech.setBodyLanguageModeFromStr(self.bodyLanguageMode)
        self.aDefaultChoices = []
        self.aDialogDefaultChoices = []
        if (self.bActivateDefaultChoiceHelp):
            self.asHelpWords = self.removeUnauthorizedCharacters(self.asHelpWords)
            self.aDefaultChoices.append( self.asHelpWords )
            self.aDialogDefaultChoices += self.asHelpWords
        if (self.bActivateDefaultChoiceRepeat):
            self.asRepeatWords = self.removeUnauthorizedCharacters(self.asRepeatWords)
            self.aDefaultChoices.append( self.asRepeatWords )
            self.aDialogDefaultChoices += self.asRepeatWords
        if (self.bActivateDefaultChoiceExit):
            self.asExitWords = self.removeUnauthorizedCharacters(self.asExitWords)
            self.aDefaultChoices.append( self.asExitWords )
            self.aDialogDefaultChoices += self.asExitWords
        if( question == None ):
            question = ""
        if( len( self.aChoices ) > len( self.aDefaultChoices ) ): # if there is at least one choice (not a default one)
            self.nIndexChoice = len( self.aDefaultChoices )
        else: # if there are only default words
            self.nIndexChoice = 0
        self.bGoOut = False
        self.initQuestionAndChoices( question )
        # initialize tactile sensor handler
        self.initSeqDetected()
        # subscribe to tactile sensors extractors (launch tactile sensor handler)
        self.memory.subscribeToEvent( "FrontTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "MiddleTactilTouched", self.getName(), "onTactilTouched" )
        self.memory.subscribeToEvent( "RearTactilTouched", self.getName(), "onTactilTouched" )
        if( not self.bGoOut ):
            self.questionRecognitionReaction()

    def onInput_choicesList(self, p):
        "Set choices list."
        self.logger.debug( "Input choicesList stimulated." )
        if( not self.bIsRunning ):
            self.bExternChoices = True
            language = self.tts.getLanguage()
            self.asNegativeWords = self.getLocalizedStringList("SpeechReco negative")
            self.asPositiveWords = self.getLocalizedStringList("SpeechReco positive")
            self.asHelpWords = self.getLocalizedStringList("SpeechReco help")
            self.asExitWords = self.getLocalizedStringList("SpeechReco exit")
            self.asRepeatWords = self.getLocalizedStringList("SpeechReco repeat")
            self.bActivateDefaultChoiceHelp = self.tryGetParameter( "Activate help command", True )
            self.bActivateDefaultChoiceRepeat = self.tryGetParameter( "Activate repeat command", True )
            self.bActivateDefaultChoiceExit = self.tryGetParameter( "Activate exit command", True )
            self.aDefaultChoices = []
            self.aDialogDefaultChoices = []
            if (self.bActivateDefaultChoiceHelp):
                self.aDefaultChoices.append( self.asHelpWords )
                self.aDialogDefaultChoices += self.asHelpWords
            if (self.bActivateDefaultChoiceRepeat):
                self.aDefaultChoices.append( self.asRepeatWords )
                self.aDialogDefaultChoices += self.asRepeatWords
            if (self.bActivateDefaultChoiceExit):
                self.aDefaultChoices.append( self.asExitWords )
                self.aDialogDefaultChoices += self.asExitWords
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            for choice in p:
                if( self.isString(choice) ):
                    choice = choice.strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                    if( choice != "" ):
                        choice = [ choice ]
                    else:
                        choice = []
                elif( self.isArray(choice) ):
                    if( choice != [] ):
                        for i in range( len( choice ) ):
                            if( self.isString(choice[i]) ):
                                choice[i] = choice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                                if( len( choice[i] ) < 1 ):
                                    del choice[i]
                                    i -= 1 # to parse the good one next loop
                            else:
                                raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                else:
                    raise Exception( "Error in choices input syntax:\nIt must be an array of choices and each choice can be either a string or an array of strings (several possibilities for one choice)\nEx: ['choice1',['choice2a','choice2b']]\nbut: " + str(p) + " found" )
                if( len( choice ) > 0 ):
                    for sWord in choice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in input choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    self.aChoices.append( choice )
                    self.aDialogChoices += choice
                    self.aChoiceIndexes.append( index )
                index += 1
            self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)

    def onInput_onStop(self):
        "Stop box behaviour."
        self.logger.debug( "Input onStop stimulated." )
        if( self.bIsRunning ):
            self.goOut( self.asExitWords[0], "onStop" )
            self.sRecoInterruption = "onStop"
        else:
            self.onUnload()

# GENERAL FUNCTIONS ------------------------------------------------------------------------------------------

    def isString(self, strVariable):
        try:
            if( type( strVariable ) == type( "some string" ) ):
                return True
        except:
            pass
        return False

    def isArray(self, aVariable):
        try:
            if( type( aVariable ) == type( ["some array"] ) ):
                return True
        except:
            pass
        return False

    def fileExists(self, strPathFilename ):
        try:
            file = open( strPathFilename, 'r' )
            if( file ):
                file.close()
                return True
        except (IOError, os.error), err:
            pass
        return False

    def getFileContents(self, sFilename ):
        "read a file and return it's contents, or '' if not found, empty, ..."
        try:
            fileContent = open( sFilename )
            aBuf = fileContent.read()
            fileContent.close()
        except:
            try:
                fileContent.close()
            except:
                pass
            return ""
        return aBuf

    def getBrainLedName(self, nNumLed):
        "Get the name of the DCM led device from its number"
        "0 => front left; 1 => next in clock wise; until 11"
        numLed = nNumLed%12
        if( numLed <= 1 ):
            return "Head/Led/Front/Right/%d/Actuator/Value" % (1-numLed)
        elif( numLed >= 10 ):
            return "Head/Led/Front/Left/%d/Actuator/Value" % (numLed-10)
        elif( numLed <= 2 ):
            return "Head/Led/Middle/Right/%d/Actuator/Value" % (2-numLed)
        elif( numLed >= 9 ):
            return "Head/Led/Middle/Left/%d/Actuator/Value" % (numLed-9)
        elif( numLed <= 5 ):
            return "Head/Led/Rear/Right/%d/Actuator/Value" % (numLed-3)
        else:
            return "Head/Led/Rear/Left/%d/Actuator/Value" % (8-numLed)

    def skipTTS(self):
        for idtts in self.aIdsTTS:
            try:
                self.animSpeech.stop(idtts)
            except:
                try:
                    self.tts.stop(idtts)
                except:
                    self.logger.debug( "Warning: The Text-To-Speech could not have been stopped." )

    def removeIdTTS(self):
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def tryGetParameter(self, sParameterName, defaultValue):
        try:
            return self.getParameter( sParameterName )
        except:
            return defaultValue

    def getLocalizedStringList(self, parameterName):
        return self.getParameter(parameterName).split("/")

    def removeUnauthorizedCharacters(self, wordList):
        wordList = [x.replace("'","") for x in wordList]
        return wordList

    def getLanguage(self):
        try:
            language = self.langDict[self.tts.getLanguage()]
        except:
            raise RuntimeError("Language " + self.tts.getLanguage() + " is not available for Choice box!")
        return language

# QUESTION AND CHOICES INITIALIZATION ----------------------------------------------------------------------

    def initQuestionAndChoices(self, p):
        "Initialize the question and the choices."
        # question processing
        language = self.getLanguage()
        if( self.isString(p) ):
            self.sQuestion = p
        else:
            raise Exception( "Error in question input syntax:\nQuestion text\nexpected for example, but:\n" + str(p[0]) + "\nfound" )
        # choices processing
        if( not self.bExternChoices ):
            self.aChoices = []
            self.aDialogChoices = []
            self.aChoiceIndexes = []
            self.aChoices.extend( self.aDefaultChoices )
            self.aDialogChoices += self.aDialogDefaultChoices
            index = 0
            listChoices = self.aListAllChoices[self.tts.getLanguage()]
            for choice in listChoices:
                aChoice = choice.split( "/" )
                if( aChoice != [] ):
                    for i in range( len( aChoice ) ):
                        aChoice[i] = aChoice[i].strip(" \t,;.\n") # remove space or tabs at beginning or end of a choice
                        if( len( aChoice[i] ) < 1 ):
                            del aChoice[i]
                            i -= 1 # to parse the good one next loop
                if( len( aChoice ) > 0 ):
                    # check if there is a word which is already used for the default choices
                    for sWord in aChoice:
                        for aDefaultChoice in self.aDefaultChoices:
                            if( sWord in aDefaultChoice ):
                                raise Exception( "Error in choices list: You chose a word which is already used for default choices:\n" + str(sWord) + " is used for the default choice: " + str(aDefaultChoice[0]) )
                    # append the choice to the list if everything worked well
                    self.aChoices.append( aChoice )
                    self.aDialogChoices += aChoice
                    self.aChoiceIndexes.append( index )
                index += 1
        # check that there is at least one choice (a default one or not)
        if( len( self.aChoices ) < 1 ):
            raise Exception( "Error in choices list: It is empty. There is no default choice nor choice entered." )
        self.dChoices = self.removeUnauthorizedCharacters(self.aDialogChoices)
        self.sQuestion = [self.sQuestion]
# DIALOG ----------------------------------------------------------------------------------------------------

    def startDialog(self, activate = True):
        if self.bIsRunning:
            self.dialogIsRunning = True
            language = self.getLanguage()
            if not self.dialogIsLoaded:
                self.topics = []
                try:
                    for top in self.allTopicPaths:
                        topic = self.dialog._addDialogFromTopicBox(top, self.behaviorAbsolutePath())
                        self.topics.append(topic)
                        self.dialogIsLoaded = True
                except Exception as e:
                    print "Could not load topic " + str(e)
            if activate:
                try:
                    for top in self.topics:
                        if language in top.split("_")[-1]:
                            self.topic = top
                            self.guid = self.topic.split("_")[2]
                    self.dialog.setConcept("choices" + self.guid, language, self.aDialogChoices)
                    self.dialog.setConcept("question" + self.guid, language, self.sQuestion)
                    self.dialog.activateTopic(self.topic)
                    self.dialog.subscribe(self.getName())
                    thread.start_new_thread( self.loopLedsBrainTwinkle, () )
                except Exception as e:
                    print "Could not activate topic " + str(e)
                try:
                    self.memory.subscribeToEvent("Dialog/LastInput", self.getName(),"onDialogLastInput")
                    self.memory.subscribeToEvent("Dialog/NotSpeaking", self.getName(),"onDialogNotSpeaking")
                    self.memory.subscribeToEvent("Dialog/NotUnderstood", self.getName(),"onDialogNotUnderstood")
                except Exception as e:
                    print "Could not subscribe to event " + str(e)

    def stopDialog(self, unload=True):
        try:
            if unload:
                self.dialog.deactivateTopic(self.topic)
                for top in self.topics:
                    self.dialog.unloadTopic(top)
                self.dialogIsLoaded = False
            else:
                self.dialogIsRunning = False
            self.dialog.unsubscribe(self.getName())
        except Exception as e:
            print "Could not deactivate/unload topic " + str(e)
        try:
            self.memory.unsubscribeToEvent("Dialog/LastInput", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotSpeaking", self.getName())
            self.memory.unsubscribeToEvent("Dialog/NotUnderstood", self.getName())
        except Exception as e:
            print "Could not unsubscribe from Event " + str(e)

# DIALOG GENERATING --------------------------------------------------------------------------------------

    def generateTopicFile(self):
        self.directory = tempfile.mkdtemp()
        try:
            os.stat(self.directory)
        except:
            os.mkdir(self.directory)
        self.allTopicPaths = []
        for lang,dLang in self.langDict.iteritems():
            guid = str(uuid.uuid4())
            topicName = "dlg_choice_%s_%s.top" % (guid, dLang)
            topicPath = os.path.join(self.directory, topicName)
            self.allTopicPaths.append(topicPath)
            dialog = self.generateTopicContent(guid, dLang)
            with open(topicPath, 'w') as topic:
                topic.write(dialog)

    def generateTopicContent(self, guid, language):
        dialog = """topic: ~dlg_choice_%s_%s () \nlanguage: %s \ndynamic: question%s\ndynamic: choices%s\nu:(in:onActivation)  ~question%s \n\tu1:(~choices%s) $test=0 """ % (guid, language, language, guid, guid, guid, guid)
        return dialog

    def removeTopicFileDir(self):
        shutil.rmtree(self.directory)

# DIALOG OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def onDialogLastInput(self, pDataName, pValue, pMessage):
        try:
            confidence = self.memory.getData("Dialog/Confidence")
        except:
            confidence = 0
        if pValue != "" and pValue in self.aDialogChoices:
            if confidence >= self.rConfirmationThreshold:
                self.sPreviousAnswer = pValue
                self.reactionWordUnderstood(pValue)
            else:
                self.stopDialog()
                self.sPreviousAnswer = pValue
                self.askConfirmation()
        else:
            if not self.bGoOut:
                if self.dialogIsRunning:
                    self.stopDialog(False)
                self.reactionNothingUnderstood()

    def onDialogNotSpeaking(self, pDataName, pValue, pMessage):
        if int(pValue) >= self.nTimeoutReco:
            if self.dialogIsRunning:
                self.stopDialog(False)
            self.sRecoInterruption = "timeout"

    def onDialogNotUnderstood(self, pDataName, pValue, pMessage):
        if self.dialogIsRunning:
            self.stopDialog(False)
        self.reactionNothingUnderstood()

# QUESTION-RECOGNITION-REACTION -----------------------------------------------------------------------------

    def questionRecognitionReaction(self):
        "Ask question, launch speech recognition and process answer."
        if not self.dialogIsRunning:
            self.startDialog(True)
        self.processRecoInterruption()

    def askConfirmation(self):
        "Ask question and initialize the speech recognition during the question to gain time in the interaction."
        self.bInConfirmation = True
        sentence = self.getLocalizedStringList("TTS confirmation")[0]
        idTTS = -1
        sentenceToSay = sentence % self.sPreviousAnswer
        if( sentenceToSay != ""):
            idTTS = self.animSpeech.pCall("say", sentenceToSay )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentenceToSay) )
        # prepare speech recognition
        aWordsRecognised = []
        aWordsRecognised.extend( self.asNegativeWords )
        aWordsRecognised.extend( self.asPositiveWords )
        sWordsRecognised = "You can say: "
        if( len( aWordsRecognised ) > 1 ):
            for i in range( len( aWordsRecognised ) - 1 ):
                sWordsRecognised += "'" + aWordsRecognised[i] + "', "
        if( len( aWordsRecognised ) > 0 ):
            sWordsRecognised += "'" + aWordsRecognised[len( aWordsRecognised ) - 1] + "'"
        sWordsRecognised += "."
        self.logger.debug( sWordsRecognised )
        self.bVocabularyLoaded = False
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the animSpeech." )
        self.startDialog()

    def processRecoInterruption(self):
        "Process speech recognition interruption (timeout, action on tactile sensor, word said, etc...)"
        # wait for the end of the reaction (help, not understood, etc...)
        while( self.sRecoInterruption == "" ):
            time.sleep( 0.2 )
        self.logger.debug( "The speech recognition has been interrupted because of: " + str(self.sRecoInterruption) + "." )
        if( self.sRecoInterruption == "timeout" ): # if recognition interrupted by timeout
            try:
                # stop recognition
                self.stopDialog()
                self.bRecoIsWaitingForVoice = False
                self.bRecoIsHearingOrAnalysing = False
                self.logger.debug( "Speech recognition stopped." )
            except:
                pass
            if( self.bInConfirmation ): # if it was a confirmation question
                # if nothing has been said, we assume that the user agree
                self.bInConfirmation = False
                if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else: # if not repeat nor help asked
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
            else:
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    self.startDialog()
                    self.sRecoInterruption = ""
                    self.processRecoInterruption()
        else:
            self.nCountNoReply = 0
        self.sRecoInterruption = ""

    def repeatWhenNoQuestion(self):
        "Robot's reaction when it is asked to repeat the question when there is no question."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.sQuestion == "" ):
            sentenceNoQuestion = self.getLocalizedStringList("TTS noQuestion")[0]
            sentenceNoQuestion += self.enumerateChoices( True ) # True to ask that the introduction is played
            if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
                sentenceNoQuestion += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
            # launch TTS
            idTTS = -1
            if( sentenceNoQuestion != ""):
                if( self.bInTactileSensorMenu ):
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion + "\\Pau=300\\" )
                else:
                    idTTS = self.animSpeech.pCall("say", sentenceNoQuestion )
                self.aIdsTTS.append( idTTS )
                self.logger.debug( "Robot says: " + str(sentenceNoQuestion) )
            # wait for the end of the TTS
            if( idTTS != -1 ):
                try:
                    self.animSpeech.wait( idTTS, 0 )
                except:
                    self.logger.debug( "Warning: Could not wait the TTS." )
        if not self.dialogIsRunning:
            self.bInTactileSensorMenu = False
            self.startDialog()

# RECO OUTPUT PROCESSING --------------------------------------------------------------------------------------

    def reactionWordUnderstood(self, word):
        "Reaction depending on the word recognised (help, repeat, word in choices, etc...) and its recognition confidence."
        self.headDefault()
        if( self.bInConfirmation ):
            self.bInConfirmation = False
            if( word in self.asNegativeWords ):
                # update number of failures
                self.nCountFailure += 1
                if( self.sPreviousAnswer in self.asHelpWords ):
                    if( self.nCountFailure >= self.nMaxCountFailure ): # if maximum number of failures
                        # skip the question
                        self.goOut( self.asExitWords[0], "notUnderstood" )
                else:
                    self.helpAfterFailure()
            else:
                if( (self.sPreviousAnswer in self.asHelpWords) or (word in self.asHelpWords) ):
                    self.helpWhenAsked()
                elif( self.sPreviousAnswer in self.asRepeatWords or (word in self.asRepeatWords) ):
                    self.repeatWhenNoQuestion()
                    # repeat the question
                else:
                    self.goOut( self.sPreviousAnswer, "wordRecognised" )
                self.sPreviousAnswer = ""
        else:
            self.sPreviousAnswer = word
            if( self.sPreviousAnswer in self.asHelpWords ):
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ):
                self.repeatWhenNoQuestion()
                # repeat the question
            else:
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
            self.sPreviousAnswer = ""

    def reactionNothingUnderstood(self):
        "Reaction when nothing has been understood or without an enough confidence."
        if( self.bInConfirmation ):
            # if the robot did not understand, we assume that the user agree
            self.bInConfirmation = False
            if( self.sPreviousAnswer in self.asHelpWords ): # if help asked
                self.helpWhenAsked()
            elif( self.sPreviousAnswer in self.asRepeatWords ): # if repeat asked
                self.repeatWhenNoQuestion()
                # repeat the question
            else: # if not repeat nor help asked
                self.goOut( self.sPreviousAnswer, "wordRecognised" )
        else:
            # update number of failures
            self.nCountFailure += 1
            if( self.nCountFailure <= 1 ): # if first failure
                sentence = self.getLocalizedStringList("TTS notUnderstood")[0]
            else: # if second failure or more
                sentenceNotUnderstoodAnims = self.getLocalizedStringList("TTS notUnderstoodAnims")
                index = random.randint( 0, len( sentenceNotUnderstoodAnims ) - 1 )
                sentence = sentenceNotUnderstoodAnims[index]
            self.helpAfterFailure( sentence )

# HELP ------------------------------------------------------------------------------------------------------

    def enumerateChoices(self, bIntroToSay):
        "Enumerate choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        maxNbEnumChoices = 3
        indexes = []
        for i in range( min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ):
            if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ):
                index = len( self.aDefaultChoices ) + i
            else:
                index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
                while( index in indexes ):
                    index = random.randint( len( self.aDefaultChoices ), len( self.aChoices ) - 1 )
            indexes.append( index )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != min(maxNbEnumChoices, len( self.aChoices ) - len( self.aDefaultChoices )) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aChoices[index][0]
        sentenceTemplate = sentenceHelpEnumChoices[2]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) <= maxNbEnumChoices ): # if there are 3 or less choices
            sentenceTemplate = sentenceHelpEnumChoices[1]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aChoices ) - len( self.aDefaultChoices ) == 0 ): # if there is no choice
            sentence = sentenceHelpEnumChoices[0]
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def enumerateDefaultChoices(self, bIntroToSay):
        "Enumerate default choices (only the first word of each choice is taken into account)."
        sentenceHelpEnumChoices = self.getLocalizedStringList("TTS helpEnumChoices")
        sentenceHelpEnumDefault = self.getLocalizedStringList("TTS helpEnumDefault")
        sentenceHelpEnumMarks = self.getLocalizedStringList("TTS enumMarks")
        enumWords = ""
        indexes = []
        for i in range( len( self.aDefaultChoices ) ):
            indexes.append( i )
            if( len( indexes ) != 1 ): # if it is not the first choice
                if( len( indexes ) != len( self.aDefaultChoices ) ): # if it is not the last choice
                    enumWords += sentenceHelpEnumMarks[0]
                else:
                    enumWords += sentenceHelpEnumMarks[1]
            enumWords += self.aDefaultChoices[i][0]
        sentenceTemplate = sentenceHelpEnumDefault[0]
        if( not bIntroToSay ):
            sentenceTemplate = sentenceHelpEnumChoices[3]
        if( len( self.aDefaultChoices ) == 0 ): # if there is no default choice
            sentence = ""
        else:
            sentence = sentenceTemplate % enumWords
        return sentence

    def explanationTactileSensor(self):
        "Explain the possible interaction with the tactile sensor."
        sentenceHelpTactile = self.getLocalizedStringList("TTS helpTactile")
        if( self.bInTactileSensorMenu ):
            sentence = sentenceHelpTactile[1]
        else:
            sentence = sentenceHelpTactile[0]
        return sentence

    def helpWhenAsked(self, sentence = ""):
        "Help when the user asked it: enumerate choices, enumerate default choices and explain tactile sensor possible interaction."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( not self.bInTactileSensorMenu ):
            # enumeration of choices
            sentence += self.enumerateChoices( True ) # True to ask that the introduction is played
            # enumeration of default choices
            sentence += self.enumerateDefaultChoices( True ) # True to ask that the introduction is played
        # explanation about alternative modality (tactil sensor, arm motion)
        sentence += self.explanationTactileSensor()
        # launch TTS
        idTTS = -1
        if( sentence != "" ):
            if( self.bInTactileSensorMenu ):
                idTTS = self.animSpeech.pCall("say", sentence + "\\Pau=300\\" )
                self.bInTactileSensorMenu = False
            else:
                idTTS = self.animSpeech.pCall("say", sentence )
            self.aIdsTTS.append( idTTS )
            self.logger.debug( "Robot says: " + str(sentence) )
        # wait for the end of the TTS
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        # repeat the question
        if not self.dialogIsRunning:
            self.startDialog()

    def helpAfterFailure(self, sentence = ""):
        "Help when the speech recognition failed (nothing understood or incorrect answer understood)."
        if self.dialogIsRunning:
            self.stopDialog(False)
        if( self.nCountFailure < self.nMaxCountFailure ): # if reasonable number of failures
            if( self.bActivateHelpWhenFailure ):
                if( self.nCountFailure in [1, 2] ): # if first or second failure
                    # enumeration of choices, or default words if there is no choice
                    if( len( self.aChoices ) - len( self.aDefaultChoices ) > 0 ): # if there is at least one choice
                        sentence += self.enumerateChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    else:
                        sentence += self.enumerateDefaultChoices( self.nCountFailure == 1 ) # the introduction is played if it is the first failure
                    if( self.nCountFailure == 2 ): # if second failure
                        # explanation about alternative modality (tactil sensor, arm motion)
                        sentence += self.explanationTactileSensor()
                # launch TTS
                idTTS = -1
                if( sentence != "" ):
                    idTTS = self.animSpeech.pCall("say", sentence )
                    self.aIdsTTS.append( idTTS )
                    self.logger.debug( "Robot says: " + str(sentence) )
                # wait for the end of the TTS
                if( idTTS != -1 ):
                    try:
                        self.animSpeech.wait( idTTS, 0 )
                    except:
                        self.logger.debug( "Warning: Could not wait the TTS." )
            # repeat the question
            if not self.dialogIsRunning:
                self.startDialog()
        else: # if maximum number of failures
            # skip the question
            self.goOut( self.asExitWords[0], "notUnderstood" )

# LEDs ----------------------------------------------------------------------------------------------------

    def ledsChangeOnTactile(self):
        self.bBrainAnimPaused = True
        self.setLedsBrain( 0.5, int(rDuration * 1000) )
        time.sleep( 0.3 )
        self.setLedsBrain( 0., int(rDuration * 1000) )
        time.sleep( 0.2 )
        self.bBrainAnimPaused = False

    def loopLedsBrainTurn(self):
        self.setLedsBrain( 0., 500 )
        rIntensity = 0.5
        nTime = 50
        bAlreadyPaused = False
        while( self.bInTactileSensorMenu ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( self.bActivateBrainLight ):
                        for i in range( 12 ):
                            if( not self.bBrainAnimPaused and self.dcm != None):
                                riseTime = self.dcm.getTime(nTime)
                                strDeviceName = self.getBrainLedName(i)
                                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )
                                time.sleep( nTime/1000. )
                                if( not self.bBrainAnimPaused ):
                                    self.dcm.set( [ strDeviceName, "Merge",  [[ 0.0, riseTime + int(nTime)/4 ]] ] )
            time.sleep( nTime/1000. )
        self.setLedsBrain( 0.5, 500 )

    def loopLedsBrainTwinkle(self):
        rIntensity = 0.5
        bOnStep = True
        bAlreadyPaused = False
        while( not self.bInTactileSensorMenu and self.bIsRunning ):
            if( not self.bBrainAnimPaused ):
                if( self.nFront == 1 or self.nMiddle == 1 or self.nRear == 1 ):
                    if( not bAlreadyPaused ):
                        bAlreadyPaused = True
                        self.setLedsBrain( 0., 50 )
                else:
                    bAlreadyPaused = False
                    if( bOnStep ):
                        self.setLedsBrain( rIntensity, 700 )
                        bOnStep = False
                    else:
                        self.setLedsBrain( 0.0, 700 )
                        bOnStep = True
            time.sleep( 1 )

    def setLedsBrain(self, rIntensity, rTimeMs):
        "One step of brain LEDS sequence (twinkle) when the robot is in speech recognition."
        if( self.bActivateBrainLight and self.dcm != None):
            riseTime = self.dcm.getTime( rTimeMs )
            for i in range( 12 ):
                strDeviceName = self.getBrainLedName(i)
                self.dcm.set( [ strDeviceName, "Merge",  [[ rIntensity, riseTime ]] ] )

# ANIMATIONS ----------------------------------------------------------------------------------------------

    def headDown(self):
        names = []
        times = []
        keys = []
        names.append("HeadPitch")
        times.append([1.24])
        keys.append([[0.392662, [3, -0.413333, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.24])
        keys.append([[-0.027654, [3, -0.413333, 0], [3, 0, 0]]])
        try:
            self.motion.angleInterpolationBezier(names, times, keys)
            self.lastHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        except BaseException, err:
          print err

    def headDefault(self):
        currentHeadPos = self.motion.getAngles(["HeadYaw","HeadPitch"], True)
        if currentHeadPos != self.lastHeadPos:
            return
        names = []
        times = []
        keys = []

        names.append("HeadPitch")
        times.append([1.2])
        keys.append([[-0.194861, [3, -0.4, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1.2])
        keys.append([[-0.00771196, [3, -0.4, 0], [3, 0, 0]]])

        try:
            self.motion.angleInterpolationBezier(names, times, keys)
        except BaseException, err:
          print err

# TACTILE SENSOR MENU -------------------------------------------------------------------------------------

    def onAlternativeModalityAction(self, p):
        "Process actions from alternative modalities (sequence from the tactile sensor, simple click on the torso button...)."
        if( not self.bIsRunning ): # if the box is not running
            return # then go out without doing a thing
        if( not self.bInTactileSensorMenu ): # if we are not in the tactile sensor menu (so if we are in the question-recognition-reaction loop)
            if( p in ["TapFront", "TapMiddle", "TapRear", "LongFront", "LongMiddle", "LongRear"] ):
                self.headDown()
                thread.start_new_thread(self.loopLedsBrainTurn, ())
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) or self.tts.isRunning( idTTS )):
                        bTTSRunning = True
                if( bTTSRunning ): # if TTS is running
                    # skip the TTS
                    self.skipTTS()
                else: # if TTS was not running (so if in recognition)
                    # prepare to start the tactile sensor menu
                    self.bInTactileSensorMenu = True
                    # and stop the question-recognition-reaction loop
                    self.goOutOfQuestionRecoReaction()
                    self.sRecoInterruption = "onTactileSensor"
                    self.sayCurrentChoice()
                    # start counting timeout
                    self.rTimeWhenActionMadeInTactileMenu = time.time()
                    thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )
            elif( p in ["Tap", "CalmDown"] ):
                # skip the TTS
                self.skipTTS()
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )
        else: # if we are in the tactile sensor menu
            self.rTimeWhenActionMadeInTactileMenu = -1.
            if( p in ["TapFront"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS ) ):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice += 1
                    if( self.nIndexChoice >= len( self.aChoices ) ):
                        self.nIndexChoice = 0
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapRear"] ):
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                if( self.bIsSayingChoice or not bTTSRunning ): # else just skip the TTS (in the sayCurrentChoice function)
                    # change choice
                    self.nIndexChoice -= 1
                    if( self.nIndexChoice < 0 ):
                        self.nIndexChoice = len( self.aChoices ) - 1
                # say the choice in the tactile sensor menu
                self.sayCurrentChoice()
                self.timeoutManagingInTactileMenu()
            elif( p in ["TapMiddle", "LongMiddle"] ):
                self.rTimeWhenActionMadeInTactileMenu = time.time()
                rTimeForThisAction = self.rTimeWhenActionMadeInTactileMenu
                bWasSayingChoice = self.bIsSayingChoice
                bTTSRunning = False # to know if TTS is running
                for idTTS in self.aIdsTTS:
                    if( self.animSpeech.isRunning( idTTS )):
                        bTTSRunning = True
                # skip the TTS if it is running
                self.skipTTS()
                if( bWasSayingChoice or not bTTSRunning ):
                    self.reactionWordUnderstood( self.aChoices[self.nIndexChoice][0] )
                    self.rTimeWhenActionMadeInTactileMenu = -1
                if( self.bIsRunning and rTimeForThisAction == self.rTimeWhenActionMadeInTactileMenu ): #$$$
                    self.rTimeWhenActionMadeInTactileMenu = -1.
                    # say the choice in the tactile sensor menu
                    self.sayCurrentChoice()
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongFront" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bLastElementSaid = False
                    while( self.bPressed ):
                        if( self.nFront == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice += 1
                            if( self.nIndexChoice >= len( self.aChoices ) - 1 ):
                                self.nIndexChoice = len( self.aChoices ) - 1
                                if( not bLastElementSaid ):
                                    bLastElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == len( self.aChoices ) - 1 ):
                                bLastElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nFront == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p == "LongRear" ):
                if( not self.bPressed ):
                    self.bPressed = True
                    bFirstElementSaid = False
                    while( self.bPressed ):
                        if( self.nRear == 0 ):
                            self.bPressed = False
                            break
                        bTTSRunning = False # to know if TTS is running
                        for idTTS in self.aIdsTTS:
                            if( self.animSpeech.isRunning( idTTS )):
                                bTTSRunning = True
                        if( self.bIsSayingChoice or not bTTSRunning ):
                            # change choice
                            self.nIndexChoice -= 1
                            if( self.nIndexChoice <= 0 ):
                                self.nIndexChoice = 0
                                if( not bFirstElementSaid ):
                                    bFirstElementSaid = True
                                    # say the choice in the tactile sensor menu
                                    thread.start_new_thread( self.sayCurrentChoice, () )
                            else:
                                # say the choice in the tactile sensor menu
                                thread.start_new_thread( self.sayCurrentChoice, () )
                        else:
                            if( self.nIndexChoice == 0 ):
                                bFirstElementSaid = True
                            # say the choice in the tactile sensor menu
                            thread.start_new_thread( self.sayCurrentChoice, () )
                        for i in range(8):
                            if( self.nRear == 0 ):
                                self.bPressed = False
                                break
                            time.sleep(0.1)
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS ) ):
                            try:
                                self.animSpeech.wait( idTTS, 0 )
                            except:
                                self.logger.debug( "Warning: Could not wait the TTS." )
                    self.timeoutManagingInTactileMenu()
            elif( p in ["Tap", "CalmDown"] ):
                # then stop everything and cancel the question
                self.goOut( self.asExitWords[0], "onTactileSensor" )

    def sayCurrentChoice(self):
        "In the tactile sensor menu, make the robot say the current selected choice"
        self.bIsSayingChoice = True
        rTimeCurrent = time.time()
        self.rTimeLastChoiceSaid = rTimeCurrent
        # stop previous TTS
        self.skipTTS()
        # launch TTS
        idTTS = -1
        self.headDown()
        sentence = self.aChoices[ self.nIndexChoice ][0] + "?"
        idTTS = self.tts.pCall("say", sentence )
        self.aIdsTTS.append( idTTS )
        self.logger.debug( "Robot says: " + str(sentence) )
        if( idTTS != -1 ):
            try:
                self.animSpeech.wait( idTTS, 0 )
            except:
                self.logger.debug( "Warning: Could not wait the TTS." )
        if( self.rTimeLastChoiceSaid == rTimeCurrent ):
            self.rTimeLastChoiceSaid = -1.
            self.bIsSayingChoice = False

    def timeoutManagingInTactileMenu(self):
        # check if there has been an other action with tts made while this one was processed
        bTTSRunning = False # to know if TTS is running
        for idTTS in self.aIdsTTS:
            if( self.animSpeech.isRunning( idTTS )):
                bTTSRunning = True
        if( not bTTSRunning ):
            # start counting timeout
            self.rTimeWhenActionMadeInTactileMenu = time.time()
            thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

    def loopCheckTimeoutInTactileMenu(self, rTimeForThisAction):
        nTimeout = time.time() + self.nTimeoutTactile
        if( self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction ):
            while( time.time() < nTimeout and self.rTimeWhenActionMadeInTactileMenu == rTimeForThisAction and self.bIsRunning ):
                time.sleep( 0.1 )
            if( self.rTimeWhenActionMadeInTactileMenu != rTimeForThisAction ):
                self.nCountNoReply = 0
            elif( self.bIsRunning ):
                self.rTimeWhenActionMadeInTactileMenu = -1.
                self.nCountNoReply += 1
                if( self.nCountNoReply >= self.nMaxCountNoReply ):
                    self.goOut( self.asExitWords[0], "timeout" )
                else:
                    bTTSRunning = False # to know if TTS is running
                    for idTTS in self.aIdsTTS:
                        if( self.animSpeech.isRunning( idTTS )):
                            bTTSRunning = True
                    if( not bTTSRunning ):
                        # say the choice in the tactile sensor menu
                        self.sayCurrentChoice()
                        # start counting timeout
                        self.rTimeWhenActionMadeInTactileMenu = time.time()
                        thread.start_new_thread( self.loopCheckTimeoutInTactileMenu, (self.rTimeWhenActionMadeInTactileMenu,) )

# TACTILE SENSOR HANDLER -------------------------------------------------------------------------------

    def initSeqDetected(self):
        "Initialize the sequence handler."
        self.bSeqStarted = False
        self.aDetectedSeqs = []
        self.aDetectedSeqs.extend(self.aSeqs)
        for seq in self.aDetectedSeqs:
            seq["index"] = 0
            seq["previousStepTime"] = 0

    def convertToArrayOfPossibleStates(self, states):
        "Check if the states described in the sequences using a string are in the right syntax, and then convert them to an array of the possible states."
        aStates = []
        aStates3 = [[1, 1, 1]]
        aStates2 = [[0, 1, 1], [1, 0, 1], [1, 1, 0]]
        aStates1 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
        aStates0 = [[0, 0, 0]]
        try:
            if( int(states) == states ): # if states is an integer
                states = str(states)
        except:
            pass
        if( self.isString(states) ):
            if( not states in ["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"] ):
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
            if( states in ["*", "0+", "1+", "2+", "3+", "3", "3-", "F+", "M+", "R+"] ):
                aStates.extend(aStates3)
            if( states in ["*", "0+", "1+", "2+", "2", "2-", "3-"] ):
                aStates.extend(aStates2)
            if( states in ["*", "0+", "1+", "1", "1-", "2-", "3-"] ):
                aStates.extend(aStates1)
            if( states in ["*", "0+", "0", "0-", "1-", "2-", "3-", "F-", "M-", "R-"] ):
                aStates.extend(aStates0)
            if( states in ["F", "F+", "F-"] ):
                aStates.append([1, 0, 0])
            if( states in ["M", "M+", "M-"] ):
                aStates.append([0, 1, 0])
            if( states in ["R", "R+", "R-"] ):
                aStates.append([0, 0, 1])
            if( states in ["F+", "M+"] ):
                aStates.append([1, 1, 0])
            if( states in ["R+", "M+"] ):
                aStates.append([0, 1, 1])
            if( states in ["F+", "R+"] ):
                aStates.append([1, 0, 1])
        elif( self.isArray(states) ):
            if( self.isArray(states[0]) ):
                aStates = states
            elif( int(states[0]) == states[0] ):
                aStates = [states]
            else:
                raise Exception( "Error in sequences states description syntax: description expected in " + str(["*", "0+", "0", "0-", "1+", "1", "1-", "2+", "2", "2-", "3+", "3", "3-", "F+", "F", "F-", "M+", "M", "M-", "R+", "R", "R-"]) + " but " + str(p) + " found with this type: " + str(type(p)) )
        else:
            raise Exception( "Error in sequences states description syntax:\nstring, array or int expected but " + str(type(p)) + " found" )
        return aStates

    def checkIfSeqsCorrespondingLeft(self, param):
        "If the sequence handler is done (there is no sequence detected left or the first in the list corresponds), then reinitialize the sequence handler, and give the corresponding sequence if there is one."
        if( self.aDetectedSeqs == [] ):
            # then no sequence corresponding in the list
            self.initSeqDetected()
        else:
            if( self.aDetectedSeqs[0]["index"] == -1 ): # if first sequence in left ones corresponds
                # then it is this sequence which is played
                thread.start_new_thread( self.onAlternativeModalityAction, (self.aDetectedSeqs[0]["name"],) )
                self.initSeqDetected()
        self.mutexCheckIfSeqsCorrespondingLeft.unlock()

    def loopCheckTimeoutMax(self, nTimeoutMax, seq, currentState, currentTime):
        "When timeout ellapsed, check the sequence status and process it."
        nPreviousIndex = seq["index"]
        time.sleep(nTimeoutMax + 0.1)
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        currentState = [self.nFront, self.nMiddle, self.nRear]
        currentTime = time.time()
        if( nPreviousIndex == seq["index"] and not self.mutexProcessCurrentState.test() and not (1 in currentState) ): # if no change in the sequence step but timeout ellapsed and sequence handler is not processing (so if there is no action from the user and the sequence is still at the same point)
            if( seq in aSeqsTemp and seq["index"] != -1 ): # but if sequence is still in the possible ones and not completed
                if( currentState in seq["statesAndTimeout"][seq["index"]] ): # last check if the current state corresponds to the next one
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else:
                    # then remove the sequence from the possible ones
                    aSeqsTemp.remove(seq)
                    self.aDetectedSeqs = aSeqsTemp
                self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def loopCheckTimeoutMin(self, nTimeoutMin, seq):
        "Wait that the minimum timeout ellapse to check if the new tactile sensor state corresponds to the expected one for this sequence."
        if( nTimeoutMin != 0 ):
            nPreviousIndex = seq["index"]
            time.sleep(nTimeoutMin - time.time() + seq["previousStepTime"])
            currentTime = time.time()
            currentState = [self.nFront, self.nMiddle, self.nRear]
            self.mutexProcessCurrentState.lock( self.processCurrentState, [0, currentState, currentTime] )

    def updateDetectedSeqs(self, seq, aSeqsTemp, currentState, currentTime):
        "Update a detected sequence."
        if( seq["index"] > 0 ): # if not the first step
            nTimeoutMin = 0
            nTimeoutMax = 5
            if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
            else:
                if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                    nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                else:
                    nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
            if( currentTime > nTimeoutMax + seq["previousStepTime"] ): # if timeout of this step ellapsed
                aSeqsTemp.remove(seq) # then it is not this sequence which is played
            elif( not (currentState in seq["statesAndTimeout"][seq["index"]]) ): # if the current state does not correspond to one of the described ones but the timeout of this step did not ellaspe
                # then we check that this state could be an intermediate one
                aIntermediateStates = [[], [], []]
                for i in range( len( currentState ) ):
                    for j in range( len( seq["statesAndTimeout"][seq["index"]] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]][j][i] )
                    for j in range( len( seq["statesAndTimeout"][seq["index"]-2] ) ):
                        aIntermediateStates[i].append( seq["statesAndTimeout"][seq["index"]-2][j][i] )
                bIsIntermediate = True
                for i in range( len( currentState ) ):
                    bIsIntermediate = bIsIntermediate and ( currentState[i] in aIntermediateStates[i] )
                if( not bIsIntermediate ):
                    aSeqsTemp.remove(seq) # then it is not this sequence which is played
            else: # if the current state correspond to one of the described ones
                if( currentTime > nTimeoutMin + seq["previousStepTime"] ): # if the minimum time to wait the next step is ellapsed
                    # then we go to the next step
                    seq["previousStepTime"] = currentTime
                    seq["index"] += 2
                    if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                        seq["index"] = -1 # then the sequence is completed
                    else: # if there is at least one step left
                        # start clock to timeout
                        nTimeoutMin = 0
                        nTimeoutMax = 5
                        if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                            if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                                nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                            else:
                                nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                        thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                        thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
                else: # if the minimum time to wait the next step is not ellapsed
                    # then we are going to wait until it is to check then
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
        elif( seq["index"] == 0 ): # for the first step
            if( currentState in seq["statesAndTimeout"][seq["index"]] ): # if the current state correspond to one of the described ones
                # then we go to the next step
                seq["previousStepTime"] = currentTime
                seq["index"] += 2
                if( seq["index"] > len( seq["statesAndTimeout"] ) ): # if there is no more step
                    seq["index"] = -1 # then the sequence is completed
                else: # if there is at least one step left
                    # start clock to timeout
                    nTimeoutMin = 0
                    nTimeoutMax = 5
                    if( self.isArray(seq["statesAndTimeout"][seq["index"]-1]) ):
                        if( seq["statesAndTimeout"][seq["index"]-1][0] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1][0]
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1][1]
                    else:
                        if( seq["statesAndTimeout"][seq["index"]-1] < 0 ):
                            nTimeoutMin = - seq["statesAndTimeout"][seq["index"]-1]
                        else:
                            nTimeoutMax = seq["statesAndTimeout"][seq["index"]-1]
                    thread.start_new_thread( self.loopCheckTimeoutMin, (nTimeoutMin, seq) )
                    thread.start_new_thread( self.loopCheckTimeoutMax, (nTimeoutMax, seq, currentState, currentTime) )
            else: # if the current state does not correspond to the first described
                aSeqsTemp.remove(seq) # then it is not this sequence which has just been started

    def updateSeqsHandler(self, currentState, currentTime):
        "Update list of detected sequences."
        aSeqsTemp = []
        aSeqsTemp.extend( self.aDetectedSeqs )
        for seq in self.aDetectedSeqs:
            self.updateDetectedSeqs( seq, aSeqsTemp, currentState, currentTime )
        self.aDetectedSeqs = aSeqsTemp
        self.mutexCheckIfSeqsCorrespondingLeft.lock( self.checkIfSeqsCorrespondingLeft, None )

    def processCurrentState(self, param):
        "Process the current tactile sensor state."
        pValue = param[0]
        currentState = param[1]
        currentTime = param[2]
        if( pValue == 1 and not self.bSeqStarted ):
            self.bSeqStarted = True
            for seq in self.aDetectedSeqs:
                seq["previousStepTime"] = currentTime
        # update sequences handler
        if( self.bSeqStarted ):
            self.updateSeqsHandler(currentState, currentTime)
        self.mutexProcessCurrentState.unlock()

    def onFrontTactilTouched(self, param):
        "Handle an action (touch or release) on the front tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [pValue, self.nMiddle, self.nRear]
        self.nFront = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onMiddleTactilTouched(self, param):
        "Handle an action (touch or release) on the middle tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, pValue, self.nRear]
        self.nMiddle = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onRearTactilTouched(self, param):
        "Handle an action (touch or release) on the rear tactile sensor."
        pValue = param[0]
        currentTime = param[1]
        currentState = [self.nFront, self.nMiddle, pValue]
        self.nRear = pValue
        self.mutexProcessCurrentState.lock( self.processCurrentState, [pValue, currentState, currentTime] )
        self.mutexTactilTouched.unlock()

    def onTactilTouched(self, pDataName, pValue, pMessage):
        "Handle an action (touch or release) on the tactile sensor."
        self.stopDialog(False)
        self.nCountNoReply = 0
        self.lastTimeoutVal = 0
        self.mutexTactilTouched.lock( getattr( self, "on" + pDataName ), [pValue, time.time()] )

# OUTPUTS ACTIVATION --------------------------------------------------------------------------------------

    def goOut(self, outputName, cancelReason = ""):
        "Activate the right output (a choice output or the other output)."
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bInTactileSensorMenu = False
        self.bIsRunning = False
        self.goOutOfQuestionRecoReaction()

        if( outputName in self.asExitWords ):
            try:
                self.other( cancelReason )
                self.logger.debug( "Output 'other' stimulated because cancel asked: " + str(cancelReason) + "." )
            except:
                try:
                    self.onStopped( cancelReason )
                    self.logger.debug( "Output 'onStopped' stimulated because cancel asked: " + str(cancelReason) + "." )
                except:
                    try:
                        self.onStopped()
                        self.logger.debug( "Output 'onStopped' stimulated because cancel asked." )
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the main output name needs to be 'other', and it needs to be dynamic (because it can be either a string, or an integer)." )
        else:
            nOutput = -1
            for i in range( len (self.aChoices) - len (self.aDefaultChoices) ):
                if( nOutput == -1 ):
                    if( outputName in self.aChoices[i+len( self.aDefaultChoices )] ):
                        nOutput = i
            if( nOutput != -1):
                if( self.bExternChoices ):
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        self.other( self.aChoiceIndexes[nOutput] )
                        self.logger.debug( "Output 'other' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                    except:
                        try:
                            self.onStopped( self.aChoiceIndexes[nOutput] )
                            self.logger.debug( "Output 'onStopped' stimulated with: " + str(self.aChoiceIndexes[nOutput]) + " (corresponding to the choice '" + str(self.aChoices[nOutput+len( self.aDefaultChoices )][0]) + "')." )
                        except:
                            choregraphe = ALProxy( "ALChoregraphe" )
                            choregraphe.onPythonError( self.getName(), "goOut", "Invalid type of output: using the input 'choicesList', the main output needs to be dynamic (because it can be either a string, or an integer)." )
                else:
                    if( self.bRepeatValidatedChoice ):
                        self.skipTTS()
                        self.animSpeech.say( outputName )
                    try:
                        func = getattr( self, "output_" + str(self.aChoiceIndexes[nOutput]+1) ) #+1 because the first one is output_1 corresponding to the element 0 in the list.
                        func(outputName)
                    except:
                        choregraphe = ALProxy( "ALChoregraphe" )
                        choregraphe.onPythonError( self.getName(), "goOut", "Invalid output: the output 'output_" + str(self.aChoiceIndexes[nOutput]+1) + "' was expected to be stimulated with: " + str(outputName) + " but could not." )

# UNLOAD --------------------------------------------------------------------------------------------------

    def goOutOfQuestionRecoReaction(self):
        "Set some variables to go out of the question-recognition-reaction loop and reinitialize other variables which are going to be used again only on the next start of this box."
        self.bGoOut = True
        self.bMustStop = True
        self.nCountFailure = 0
        self.nCountNoReply = 0
        self.bInConfirmation = False
        self.bVocabularyLoaded = False
        self.skipTTS()
        if self.dialogIsRunning:
            self.stopDialog(False)
        for idTTS in self.aIdsTTS:
            try:
                self.aIdsTTS.remove( idTTS )
            except:
                self.logger.debug( "Warning: The task ID corresponding to the Text-To-Speech could not have been removed from the ID tasks list." )

    def onUnload(self):
        "Reinitialize variables to default state."
        self.goOutOfQuestionRecoReaction()
        self.stopDialog()
        language = self.getLanguage()
        #reset concepts to reduce loading time
        try:
            self.dialog.setConcept("choices" + self.guid, language, [])
            self.dialog.setConcept("question" + self.guid, language, [])
        except Exception as e:
            print "Could not empty concept " + str(e)
        try:
            self.removeTopicFileDir()
        except Exception as e:
            print "Could not remove temporary topic file directory " + str(e)
        try:
            self.memory.unsubscribeToEvent( "FrontTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "MiddleTactilTouched", self.getName() )
            self.memory.unsubscribeToEvent( "RearTactilTouched", self.getName() )
        except:
            pass
        self.bIsRunning = False]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic" nuanceCode="arw">
                                      <keyword>نعم</keyword>
                                      <keyword>لا</keyword>
                                      <keyword></keyword>
                                    </arabic>
                                    <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian" nuanceCode="ptb">
                                      <keyword>sim</keyword>
                                      <keyword>não</keyword>
                                      <keyword></keyword>
                                    </brazilian>
                                    <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese" nuanceCode="mnc">
                                      <keyword>是</keyword>
                                      <keyword>不是</keyword>
                                      <keyword></keyword>
                                    </chinese>
                                    <czech uiName="‎Český Jazyk (Czech)" languageName="Czech" nuanceCode="czc">
                                      <keyword>ano</keyword>
                                      <keyword>ne</keyword>
                                      <keyword></keyword>
                                    </czech>
                                    <danish uiName="‎Dansk (Danish)" languageName="Danish" nuanceCode="dad">
                                      <keyword>ja</keyword>
                                      <keyword>nej</keyword>
                                      <keyword></keyword>
                                    </danish>
                                    <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch" nuanceCode="dun">
                                      <keyword>ja</keyword>
                                      <keyword>nee</keyword>
                                      <keyword></keyword>
                                    </dutch>
                                    <english uiName="‎American English (American English)" languageName="English" nuanceCode="enu">
                                      <keyword>yes</keyword>
                                      <keyword>no</keyword>
                                      <keyword></keyword>
                                    </english>
                                    <finnish uiName="‎Suomi (Finnish)" languageName="Finnish" nuanceCode="fif">
                                      <keyword>kyllä</keyword>
                                      <keyword>ei</keyword>
                                      <keyword></keyword>
                                    </finnish>
                                    <french uiName="‎Français (French)" languageName="French" nuanceCode="frf">
                                      <keyword>oui</keyword>
                                      <keyword>non</keyword>
                                      <keyword></keyword>
                                    </french>
                                    <german uiName="‎Deutsch (German)" languageName="German" nuanceCode="ged">
                                      <keyword>ja</keyword>
                                      <keyword>nein</keyword>
                                      <keyword></keyword>
                                    </german>
                                    <greek uiName="‎Ελληνικά (Greek)" languageName="Greek" nuanceCode="grg" />
                                    <italian uiName="‎Italiano (Italian)" languageName="Italian" nuanceCode="iti">
                                      <keyword>sì</keyword>
                                      <keyword>no</keyword>
                                      <keyword></keyword>
                                    </italian>
                                    <japanese uiName="‎日本語 (Japanese)" languageName="Japanese" nuanceCode="jpj">
                                      <keyword>はい</keyword>
                                      <keyword>いいえ</keyword>
                                      <keyword></keyword>
                                    </japanese>
                                    <korean uiName="‎한국어 (Korean)" languageName="Korean" nuanceCode="kok">
                                      <keyword>예</keyword>
                                      <keyword>아니</keyword>
                                      <keyword></keyword>
                                    </korean>
                                    <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan" nuanceCode="mnt">
                                      <keyword>是</keyword>
                                      <keyword>不是</keyword>
                                      <keyword></keyword>
                                    </mandarintaiwan>
                                    <norwegian uiName="‎Norsk (Norwegian)" languageName="Norwegian" nuanceCode="nor" />
                                    <polish uiName="‎Język polski (Polish)" languageName="Polish" nuanceCode="plp">
                                      <keyword>tak</keyword>
                                      <keyword>nie</keyword>
                                      <keyword></keyword>
                                    </polish>
                                    <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese" nuanceCode="ptp">
                                      <keyword>sim</keyword>
                                      <keyword>não</keyword>
                                      <keyword></keyword>
                                    </portuguese>
                                    <russian uiName="‎Русский (Russian)" languageName="Russian" nuanceCode="rur">
                                      <keyword>да</keyword>
                                      <keyword>нет</keyword>
                                      <keyword></keyword>
                                    </russian>
                                    <spanish uiName="‎Español (Spanish)" languageName="Spanish" nuanceCode="spe">
                                      <keyword>si</keyword>
                                      <keyword>no</keyword>
                                      <keyword></keyword>
                                    </spanish>
                                    <swedish uiName="‎Svenska (Swedish)" languageName="Swedish" nuanceCode="sws">
                                      <keyword>ja</keyword>
                                      <keyword>ingen</keyword>
                                      <keyword></keyword>
                                    </swedish>
                                    <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish" nuanceCode="trt">
                                      <keyword>evet</keyword>
                                      <keyword>hayır</keyword>
                                      <keyword></keyword>
                                    </turkish>
                                    <language>english</language>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is&#x0A;received on this input. The signal can be&#x0A;either a string so that the robot asks a&#x0A;question before the recognition of a&#x0A;choice, or a bang so that the speech&#x0A;recognition starts immediately without any&#x0A;question." id="2" />
                                  <Input name="choicesList" type="0" type_size="1" nature="1" inner="0" tooltip='To have extern choices list (for example,&#x0A;depending on extern variables).&#x0A;eg [[&quot;yes&quot;,&quot;ok&quot;],&quot;no&quot;,&quot;maybe&quot;]&#x0A;!! Warning !! : Must be set before each&#x0A;time the box is started (with onStart&#x0A;input). Otherwise, the choices displayed&#x0A;on the box will be selected.' id="3" />
                                  <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip='Box behavior stops when a signal is&#x0A;received on this input, the &apos;other&apos; output is&#x0A;stimulated by &quot;onStop&quot;.' id="4" />
                                  <Output name="other" type="0" type_size="1" nature="1" inner="0" tooltip='When the user skipped the question, this output gives how it has been&#x0A;skipped. Gives also the number of the choice chosen in case of external&#x0A;choices.&#x0A;This output can be:&#x0A;- &quot;timeout&quot; if the user has not replied.&#x0A;- &quot;notUnderstood&quot; if the interaction with the speech recognition failed.&#x0A;- &quot;onStop&quot; if the onStop input has been activated.&#x0A;- &quot;wordRecognised&quot; if the exit command has been understood.&#x0A;- &quot;onTactileSensor&quot; if the user has tapped the tactile sensor of the robot.&#x0A;- an integer being the number of the external choice in the input list.' id="5" />
                                  <Output name="output_1" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="6" />
                                  <Output name="output_2" type="0" type_size="1" nature="2" inner="0" tooltip="This IO has been automatically added by box. Read box tooltip for more information." id="7" />
                                  <Parameter name="Minimum threshold to understand" inherits_from_parent="0" content_type="2" value="0.3" default_value="0.2" min="0" max="1" tooltip="Minimum threshold to get in order to be understood by the robot." id="8" />
                                  <Parameter name="Minimum threshold to be sure" inherits_from_parent="0" content_type="2" value="0.4" default_value="0.3" min="0" max="1" tooltip="Minimum threshold to get so that the robot would be sure about the user&apos;s&#x0A;answer. Below this threshold, the robot asks a confirmation about what has been&#x0A;understood." id="9" />
                                  <Parameter name="Speech recognition timeout when confirmation" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="When the robot asks if what he understood is correct, after this time, if there has been&#x0A;nothing heard, the speech recognition is stopped and the answer understood is&#x0A;considered as correct." id="10" />
                                  <Parameter name="Speech recognition timeout" inherits_from_parent="0" content_type="1" value="10" default_value="6" min="1" max="20" tooltip="After this time, if there has been nothing heard, the speech recognition is stopped&#x0A;and the question is repeated or is skipped." id="11" />
                                  <Parameter name="Maximum number of repetition when no reply" inherits_from_parent="0" content_type="1" value="3" default_value="3" min="1" max="20" tooltip='After this number of times when the user did not reply, the question is skipped, and&#x0A;the output other is stimulated with &quot;timeout&quot;.' id="12" />
                                  <Parameter name="Repeat validated choice" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="If this option is activated, the robot repeats the validated choice when it exits the box." id="13" />
                                  <Parameter name="Tactile sensor menu timeout" inherits_from_parent="0" content_type="1" value="6" default_value="10" min="1" max="20" tooltip="After this time, if there has been no action made on the tactile sensor or the torso&#x0A;button, the choice currently selected is repeated or the question is skipped." id="14" />
                                  <Parameter name="Maximum number of repetition when failure" inherits_from_parent="0" content_type="1" value="5" default_value="5" min="1" max="20" tooltip='After this number of times when the robot did not understand the user, the question&#x0A;is skipped, and the output other is stimulated with &quot;notUnderstood&quot;.' id="15" />
                                  <Parameter name="Activate help when failure" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="When this parameter is activated, when the robot did not understand the user, he&#x0A;says some help enumerating available choices and attracting attention on the&#x0A;other available modalities (head tactile sensor)." id="16" />
                                  <Parameter name="Activate help command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the help command. So you can say &quot;help&quot; during the speech recognition&#x0A;and the robot will tell you more information.&#x0A;You will still be able to ask help by clicking the torso button.' id="17" />
                                  <Parameter name="Activate repeat command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Activate the repeat command. So you can say &quot;repeat&quot; during the speech&#x0A;recognition and the robot will repeat the question.' id="18" />
                                  <Parameter name="Activate exit command" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip='Enable the exit command. So you can say &quot;exit&quot; during the speech recognition&#x0A;and the box will be stopped and the &apos;other&apos; output will be stimulated with&#x0A;&quot;wordRecognised&quot;.&#x0A;You will still be able to exit the box with&#x0A;the tactile sensor.' id="19" />
                                  <Parameter name="Body language mode" inherits_from_parent="0" content_type="3" value="disabled" default_value="contextual" custom_choice="0" tooltip="" id="20">
                                    <Choice value="contextual" />
                                    <Choice value="random" />
                                    <Choice value="disabled" />
                                  </Parameter>
                                  <Parameter name="SpeechReco negative" inherits_from_parent="0" content_type="5" value="no/no nao/disagree/I disagree" default_value="no/no nao/disagree/I disagree" tooltip="" id="21" />
                                  <Parameter name="SpeechReco positive" inherits_from_parent="0" content_type="5" value="yes/yes nao/agree/I agree/of course" default_value="yes/yes nao/agree/I agree/of course" tooltip="" id="22" />
                                  <Parameter name="SpeechReco help" inherits_from_parent="0" content_type="5" value="help/help me/i don&apos;t know" default_value="help/help me/i don&apos;t know" tooltip="" id="23" />
                                  <Parameter name="SpeechReco exit" inherits_from_parent="0" content_type="5" value="exit/stop/quit" default_value="exit/stop/quit" tooltip="" id="24" />
                                  <Parameter name="SpeechReco repeat" inherits_from_parent="0" content_type="5" value="repeat/pardon/what/excuse me" default_value="repeat/pardon/what/excuse me" tooltip="" id="25" />
                                  <Parameter name="TTS confirmation" inherits_from_parent="0" content_type="5" value="I understood %s. Is that correct?" default_value="I understood %s. Is that correct?" tooltip="" id="26" />
                                  <Parameter name="TTS enumMarks" inherits_from_parent="0" content_type="5" value=", / or " default_value=", / or " tooltip="" id="27" />
                                  <Parameter name="TTS helpEnumChoices" inherits_from_parent="0" content_type="5" value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" default_value="No answer is really expected. /Your answer can be %s. /Your answer can be for example %s. /%s?" tooltip="" id="28" />
                                  <Parameter name="TTS helpEnumDefault" inherits_from_parent="0" content_type="5" value=" you can ask me: %s. " default_value=" you can ask me: %s. " tooltip="" id="29" />
                                  <Parameter name="TTS helpTactile" inherits_from_parent="0" content_type="5" value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." default_value="You can also use my tactile sensor to choose the answer./\Pau=600\ Press the front or the rear of my skull cap to go through all of the available answers. Press then the circle in the middle to validate your choice." tooltip="" id="30" />
                                  <Parameter name="TTS notUnderstood" inherits_from_parent="0" content_type="5" value="I did not understand. " default_value="I did not understand. " tooltip="" id="31" />
                                  <Parameter name="TTS noQuestion" inherits_from_parent="0" content_type="5" value="No question has been defined, so I cannot repeat it. " default_value="No question has been defined, so I cannot repeat it. " tooltip="" id="32" />
                                  <Parameter name="TTS notUnderstoodAnims" inherits_from_parent="0" content_type="5" value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " default_value="There is too much noise here! /Try to talk to me more distinctly. /I can&apos;t hear you very well. " tooltip="" id="33" />
                                </Box>
                                <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="59" y="54">
                                  <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                                  <script language="4">
                                    <content>
                                      <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.sentences = {
			"Chinese" : " 你喜欢吃巧克力吗？ ",
			"English" : " Do you want to play again? ",
			"French" : " Aimes-tu le chocolat ? ",
			"German" : " Mögen Sie Schokolade? ",
			"Italian" : " Ti piace il cioccolato? ",
			"Japanese" : " チョコレートが好きですか ",
			"Korean" : " 당신은 초콜렛을 좋아합니까? ",
			"Portuguese" : " Gostas de chocolate? ",
			"Brazilian" : " Você gosta de chocolate? ",
			"Spanish" : " ¿Te gusta el chocolate? ",
			"Arabic" : " هل تحب الشوكولاته؟ ",
			"Polish" : " Lubisz czekoladę? ",
			"Czech" : " Máš rád čokoládu? ",
			"Dutch" : " Hou je van chocolade? ",
			"Danish" : " Kan du lide chokolade? ",
			"Finnish" : " Pidätkö suklaasta? ",
			"Swedish" : " Gillar du choklad? ",
			"Russian" : " Вы любите шоколад? ",
			"Turkish" : " Çikolata sever misin? ",
			"MandarinTaiwan" : " 你喜歡吃巧克力嗎？ ",
		}

	def onLoad(self):
		self.tts = self.session().service("ALTextToSpeech")

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
                                    </content>
                                  </script>
                                  <pluginContent>
                                    <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese">
                                      <![CDATA[你喜欢吃巧克力吗？]]>
                                    </chinese>
                                    <english uiName="‎American English (American English)" languageName="English">
                                      <![CDATA[Do you want to play again?]]>
                                    </english>
                                    <french uiName="‎Français (French)" languageName="French">
                                      <![CDATA[Aimes-tu le chocolat ?]]>
                                    </french>
                                    <german uiName="‎Deutsch (German)" languageName="German">
                                      <![CDATA[Mögen Sie Schokolade?]]>
                                    </german>
                                    <italian uiName="‎Italiano (Italian)" languageName="Italian">
                                      <![CDATA[Ti piace il cioccolato?]]>
                                    </italian>
                                    <japanese uiName="‎日本語 (Japanese)" languageName="Japanese">
                                      <![CDATA[チョコレートが好きですか]]>
                                    </japanese>
                                    <korean uiName="‎한국어 (Korean)" languageName="Korean">
                                      <![CDATA[당신은 초콜렛을 좋아합니까?]]>
                                    </korean>
                                    <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese">
                                      <![CDATA[Gostas de chocolate?]]>
                                    </portuguese>
                                    <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian">
                                      <![CDATA[Você gosta de chocolate?]]>
                                    </brazilian>
                                    <spanish uiName="‎Español (Spanish)" languageName="Spanish">
                                      <![CDATA[¿Te gusta el chocolate?]]>
                                    </spanish>
                                    <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic">
                                      <![CDATA[هل تحب الشوكولاته؟]]>
                                    </arabic>
                                    <polish uiName="‎Język polski (Polish)" languageName="Polish">
                                      <![CDATA[Lubisz czekoladę?]]>
                                    </polish>
                                    <czech uiName="‎Český Jazyk (Czech)" languageName="Czech">
                                      <![CDATA[Máš rád čokoládu?]]>
                                    </czech>
                                    <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch">
                                      <![CDATA[Hou je van chocolade?]]>
                                    </dutch>
                                    <danish uiName="‎Dansk (Danish)" languageName="Danish">
                                      <![CDATA[Kan du lide chokolade?]]>
                                    </danish>
                                    <finnish uiName="‎Suomi (Finnish)" languageName="Finnish">
                                      <![CDATA[Pidätkö suklaasta?]]>
                                    </finnish>
                                    <swedish uiName="‎Svenska (Swedish)" languageName="Swedish">
                                      <![CDATA[Gillar du choklad?]]>
                                    </swedish>
                                    <russian uiName="‎Русский (Russian)" languageName="Russian">
                                      <![CDATA[Вы любите шоколад?]]>
                                    </russian>
                                    <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish">
                                      <![CDATA[Çikolata sever misin?]]>
                                    </turkish>
                                    <mandarintaiwan uiName="‎國語 (Taiwanese Mandarin)" languageName="MandarinTaiwan">
                                      <![CDATA[你喜歡吃巧克力嗎？]]>
                                    </mandarintaiwan>
                                    <language>english</language>
                                  </pluginContent>
                                  <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                  <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                                  <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                                </Box>
                                <Link inputowner="1" indexofinput="2" outputowner="5" indexofoutput="3" />
                                <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                                <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                                <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                                <Link inputowner="0" indexofinput="6" outputowner="1" indexofoutput="7" />
                              </Diagram>
                            </BehaviorKeyframe>
                          </BehaviorLayer>
                        </Timeline>
                      </Box>
                      <Link inputowner="10" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="1" indexofinput="2" outputowner="10" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="5" outputowner="1" indexofoutput="6" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="13" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="4" />
            <Link inputowner="2" indexofinput="2" outputowner="3" indexofoutput="4" />
            <Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="5" />
            <Link inputowner="9" indexofinput="2" outputowner="2" indexofoutput="4" />
            <Link inputowner="1" indexofinput="2" outputowner="9" indexofoutput="4" />
            <Link inputowner="5" indexofinput="2" outputowner="9" indexofoutput="5" />
            <Link inputowner="13" indexofinput="2" outputowner="5" indexofoutput="4" />
            <Link inputowner="0" indexofinput="4" outputowner="5" indexofoutput="5" />
            <Link inputowner="13" indexofinput="2" outputowner="0" indexofoutput="2" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
